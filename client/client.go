// Generated by go-wayland-scanner
// https://github.com/rajveermalviya/go-wayland/cmd/go-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland/-/raw/3bda3d1b4729c8ee7c533520a199611cb841bc8f/protocol/wayland.xml
//
// Wayland Protocol Copyright:
//
// Copyright © 2008-2011 Kristian Høgsberg
// Copyright © 2010-2011 Intel Corporation
// Copyright © 2012-2013 Collabora, Ltd.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice (including the
// next paragraph) shall be included in all copies or substantial
// portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package client

import "sync"

// WlDisplay : core global object
//
// The core global object.  This is a special singleton object.  It
// is used for internal Wayland protocol features.
type WlDisplay struct {
	BaseProxy
	mu               sync.RWMutex
	errorHandlers    []WlDisplayErrorHandler
	deleteIDHandlers []WlDisplayDeleteIDHandler
}

// NewWlDisplay : core global object
//
// The core global object.  This is a special singleton object.  It
// is used for internal Wayland protocol features.
func NewWlDisplay(ctx *Context) *WlDisplay {
	wlDisplay := &WlDisplay{}
	ctx.Register(wlDisplay)
	return wlDisplay
}

// Sync : asynchronous roundtrip
//
// The sync request asks the server to emit the 'done' event
// on the returned wl_callback object.  Since requests are
// handled in-order and events are delivered in-order, this can
// be used as a barrier to ensure all previous requests and the
// resulting events have been handled.
//
// The object returned by this request will be destroyed by the
// compositor after the callback is fired and as such the client must not
// attempt to use it after that point.
//
// The callback_data passed in the callback is the event serial.
//
// callback: callback object for the sync request
func (i *WlDisplay) Sync() (*WlCallback, error) {
	wlCallback := NewWlCallback(i.Context())
	err := i.Context().SendRequest(i, 0, wlCallback)
	return wlCallback, err
}

// GetRegistry : get global registry object
//
// This request creates a registry object that allows the client
// to list and bind the global objects available from the
// compositor.
//
// It should be noted that the server side resources consumed in
// response to a get_registry request can only be released when the
// client disconnects, not when the client side proxy is destroyed.
// Therefore, clients should invoke get_registry as infrequently as
// possible to avoid wasting memory.
//
// registry: global registry object
func (i *WlDisplay) GetRegistry() (*WlRegistry, error) {
	wlRegistry := NewWlRegistry(i.Context())
	err := i.Context().SendRequest(i, 1, wlRegistry)
	return wlRegistry, err
}

// WlDisplayError : global error values
//
// These errors are global and can be emitted in response to any
// server request.
const (
	// WlDisplayErrorInvalidObject : server couldn't find object
	WlDisplayErrorInvalidObject = 0
	// WlDisplayErrorInvalidMethod : method doesn't exist on the specified interface or malformed request
	WlDisplayErrorInvalidMethod = 1
	// WlDisplayErrorNoMemory : server is out of memory
	WlDisplayErrorNoMemory = 2
	// WlDisplayErrorImplementation : implementation error in compositor
	WlDisplayErrorImplementation = 3
)

// WlDisplayErrorEvent : fatal error event
//
// The error event is sent out when a fatal (non-recoverable)
// error has occurred.  The object_id argument is the object
// where the error occurred, most often in response to a request
// to that object.  The code identifies the error and is defined
// by the object interface.  As such, each interface defines its
// own set of error codes.  The message is a brief description
// of the error, for (debugging) convenience.
type WlDisplayErrorEvent struct {
	ObjectID Proxy
	Code     uint32
	Message  string
}

type WlDisplayErrorHandler interface {
	HandleWlDisplayError(WlDisplayErrorEvent)
}

// AddErrorHandler : fatal error event
//
// The error event is sent out when a fatal (non-recoverable)
// error has occurred.  The object_id argument is the object
// where the error occurred, most often in response to a request
// to that object.  The code identifies the error and is defined
// by the object interface.  As such, each interface defines its
// own set of error codes.  The message is a brief description
// of the error, for (debugging) convenience.
func (i *WlDisplay) AddErrorHandler(h WlDisplayErrorHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.errorHandlers = append(i.errorHandlers, h)
	i.mu.Unlock()
}

func (i *WlDisplay) RemoveErrorHandler(h WlDisplayErrorHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.errorHandlers {
		if e == h {
			i.errorHandlers = append(i.errorHandlers[:j], i.errorHandlers[j+1:]...)
			break
		}
	}
}

// WlDisplayDeleteIDEvent : acknowledge object ID deletion
//
// This event is used internally by the object ID management
// logic. When a client deletes an object that it had created,
// the server will send this event to acknowledge that it has
// seen the delete request. When the client receives this event,
// it will know that it can safely reuse the object ID.
type WlDisplayDeleteIDEvent struct {
	ID uint32
}

type WlDisplayDeleteIDHandler interface {
	HandleWlDisplayDeleteID(WlDisplayDeleteIDEvent)
}

// AddDeleteIDHandler : acknowledge object ID deletion
//
// This event is used internally by the object ID management
// logic. When a client deletes an object that it had created,
// the server will send this event to acknowledge that it has
// seen the delete request. When the client receives this event,
// it will know that it can safely reuse the object ID.
func (i *WlDisplay) AddDeleteIDHandler(h WlDisplayDeleteIDHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.deleteIDHandlers = append(i.deleteIDHandlers, h)
	i.mu.Unlock()
}

func (i *WlDisplay) RemoveDeleteIDHandler(h WlDisplayDeleteIDHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.deleteIDHandlers {
		if e == h {
			i.deleteIDHandlers = append(i.deleteIDHandlers[:j], i.deleteIDHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlDisplay) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.errorHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDisplayErrorEvent{
			ObjectID: event.Proxy(i.Context()),
			Code:     event.Uint32(),
			Message:  event.String(),
		}

		i.mu.RLock()
		for _, h := range i.errorHandlers {
			i.mu.RUnlock()

			h.HandleWlDisplayError(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.deleteIDHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDisplayDeleteIDEvent{
			ID: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.deleteIDHandlers {
			i.mu.RUnlock()

			h.HandleWlDisplayDeleteID(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlRegistry : global registry object
//
// The singleton global registry object.  The server has a number of
// global objects that are available to all clients.  These objects
// typically represent an actual object in the server (for example,
// an input device) or they are singleton objects that provide
// extension functionality.
//
// When a client creates a registry object, the registry object
// will emit a global event for each global currently in the
// registry.  Globals come and go as a result of device or
// monitor hotplugs, reconfiguration or other events, and the
// registry will send out global and global_remove events to
// keep the client up to date with the changes.  To mark the end
// of the initial burst of events, the client can use the
// wl_display.sync request immediately after calling
// wl_display.get_registry.
//
// A client can bind to a global object by using the bind
// request.  This creates a client-side handle that lets the object
// emit events to the client and lets the client invoke requests on
// the object.
type WlRegistry struct {
	BaseProxy
	mu                   sync.RWMutex
	globalHandlers       []WlRegistryGlobalHandler
	globalRemoveHandlers []WlRegistryGlobalRemoveHandler
}

// NewWlRegistry : global registry object
//
// The singleton global registry object.  The server has a number of
// global objects that are available to all clients.  These objects
// typically represent an actual object in the server (for example,
// an input device) or they are singleton objects that provide
// extension functionality.
//
// When a client creates a registry object, the registry object
// will emit a global event for each global currently in the
// registry.  Globals come and go as a result of device or
// monitor hotplugs, reconfiguration or other events, and the
// registry will send out global and global_remove events to
// keep the client up to date with the changes.  To mark the end
// of the initial burst of events, the client can use the
// wl_display.sync request immediately after calling
// wl_display.get_registry.
//
// A client can bind to a global object by using the bind
// request.  This creates a client-side handle that lets the object
// emit events to the client and lets the client invoke requests on
// the object.
func NewWlRegistry(ctx *Context) *WlRegistry {
	wlRegistry := &WlRegistry{}
	ctx.Register(wlRegistry)
	return wlRegistry
}

// Bind : bind an object to the display
//
// Binds a new, client-created object to the server using the
// specified name as the identifier.
//
// name: unique numeric name of the object
// id: bounded object
func (i *WlRegistry) Bind(name uint32, iface string, version uint32, id Proxy) error {
	err := i.Context().SendRequest(i, 0, name, iface, version, id)
	return err
}

// WlRegistryGlobalEvent : announce global object
//
// Notify the client of global objects.
//
// The event notifies the client that a global object with
// the given name is now available, and it implements the
// given version of the given interface.
type WlRegistryGlobalEvent struct {
	Name      uint32
	Interface string
	Version   uint32
}

type WlRegistryGlobalHandler interface {
	HandleWlRegistryGlobal(WlRegistryGlobalEvent)
}

// AddGlobalHandler : announce global object
//
// Notify the client of global objects.
//
// The event notifies the client that a global object with
// the given name is now available, and it implements the
// given version of the given interface.
func (i *WlRegistry) AddGlobalHandler(h WlRegistryGlobalHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.globalHandlers = append(i.globalHandlers, h)
	i.mu.Unlock()
}

func (i *WlRegistry) RemoveGlobalHandler(h WlRegistryGlobalHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.globalHandlers {
		if e == h {
			i.globalHandlers = append(i.globalHandlers[:j], i.globalHandlers[j+1:]...)
			break
		}
	}
}

// WlRegistryGlobalRemoveEvent : announce removal of global object
//
// Notify the client of removed global objects.
//
// This event notifies the client that the global identified
// by name is no longer available.  If the client bound to
// the global using the bind request, the client should now
// destroy that object.
//
// The object remains valid and requests to the object will be
// ignored until the client destroys it, to avoid races between
// the global going away and a client sending a request to it.
type WlRegistryGlobalRemoveEvent struct {
	Name uint32
}

type WlRegistryGlobalRemoveHandler interface {
	HandleWlRegistryGlobalRemove(WlRegistryGlobalRemoveEvent)
}

// AddGlobalRemoveHandler : announce removal of global object
//
// Notify the client of removed global objects.
//
// This event notifies the client that the global identified
// by name is no longer available.  If the client bound to
// the global using the bind request, the client should now
// destroy that object.
//
// The object remains valid and requests to the object will be
// ignored until the client destroys it, to avoid races between
// the global going away and a client sending a request to it.
func (i *WlRegistry) AddGlobalRemoveHandler(h WlRegistryGlobalRemoveHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.globalRemoveHandlers = append(i.globalRemoveHandlers, h)
	i.mu.Unlock()
}

func (i *WlRegistry) RemoveGlobalRemoveHandler(h WlRegistryGlobalRemoveHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.globalRemoveHandlers {
		if e == h {
			i.globalRemoveHandlers = append(i.globalRemoveHandlers[:j], i.globalRemoveHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlRegistry) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.globalHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlRegistryGlobalEvent{
			Name:      event.Uint32(),
			Interface: event.String(),
			Version:   event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.globalHandlers {
			i.mu.RUnlock()

			h.HandleWlRegistryGlobal(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.globalRemoveHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlRegistryGlobalRemoveEvent{
			Name: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.globalRemoveHandlers {
			i.mu.RUnlock()

			h.HandleWlRegistryGlobalRemove(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlCallback : callback object
//
// Clients can handle the 'done' event to get notified when
// the related request is done.
type WlCallback struct {
	BaseProxy
	mu           sync.RWMutex
	doneHandlers []WlCallbackDoneHandler
}

// NewWlCallback : callback object
//
// Clients can handle the 'done' event to get notified when
// the related request is done.
func NewWlCallback(ctx *Context) *WlCallback {
	wlCallback := &WlCallback{}
	ctx.Register(wlCallback)
	return wlCallback
}

// WlCallbackDoneEvent : done event
//
// Notify the client when the related request is done.
type WlCallbackDoneEvent struct {
	CallbackData uint32
}

type WlCallbackDoneHandler interface {
	HandleWlCallbackDone(WlCallbackDoneEvent)
}

// AddDoneHandler : done event
//
// Notify the client when the related request is done.
func (i *WlCallback) AddDoneHandler(h WlCallbackDoneHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.doneHandlers = append(i.doneHandlers, h)
	i.mu.Unlock()
}

func (i *WlCallback) RemoveDoneHandler(h WlCallbackDoneHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.doneHandlers {
		if e == h {
			i.doneHandlers = append(i.doneHandlers[:j], i.doneHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlCallback) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.doneHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlCallbackDoneEvent{
			CallbackData: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.doneHandlers {
			i.mu.RUnlock()

			h.HandleWlCallbackDone(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlCompositor : the compositor singleton
//
// A compositor.  This object is a singleton global.  The
// compositor is in charge of combining the contents of multiple
// surfaces into one displayable output.
type WlCompositor struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlCompositor : the compositor singleton
//
// A compositor.  This object is a singleton global.  The
// compositor is in charge of combining the contents of multiple
// surfaces into one displayable output.
func NewWlCompositor(ctx *Context) *WlCompositor {
	wlCompositor := &WlCompositor{}
	ctx.Register(wlCompositor)
	return wlCompositor
}

// CreateSurface : create new surface
//
// Ask the compositor to create a new surface.
//
// id: the new surface
func (i *WlCompositor) CreateSurface() (*WlSurface, error) {
	wlSurface := NewWlSurface(i.Context())
	err := i.Context().SendRequest(i, 0, wlSurface)
	return wlSurface, err
}

// CreateRegion : create new region
//
// Ask the compositor to create a new region.
//
// id: the new region
func (i *WlCompositor) CreateRegion() (*WlRegion, error) {
	wlRegion := NewWlRegion(i.Context())
	err := i.Context().SendRequest(i, 1, wlRegion)
	return wlRegion, err
}

// WlShmPool : a shared memory pool
//
// The wl_shm_pool object encapsulates a piece of memory shared
// between the compositor and client.  Through the wl_shm_pool
// object, the client can allocate shared memory wl_buffer objects.
// All objects created through the same pool share the same
// underlying mapped memory. Reusing the mapped memory avoids the
// setup/teardown overhead and is useful when interactively resizing
// a surface or for many small buffers.
type WlShmPool struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlShmPool : a shared memory pool
//
// The wl_shm_pool object encapsulates a piece of memory shared
// between the compositor and client.  Through the wl_shm_pool
// object, the client can allocate shared memory wl_buffer objects.
// All objects created through the same pool share the same
// underlying mapped memory. Reusing the mapped memory avoids the
// setup/teardown overhead and is useful when interactively resizing
// a surface or for many small buffers.
func NewWlShmPool(ctx *Context) *WlShmPool {
	wlShmPool := &WlShmPool{}
	ctx.Register(wlShmPool)
	return wlShmPool
}

// CreateBuffer : create a buffer from the pool
//
// Create a wl_buffer object from the pool.
//
// The buffer is created offset bytes into the pool and has
// width and height as specified.  The stride argument specifies
// the number of bytes from the beginning of one row to the beginning
// of the next.  The format is the pixel format of the buffer and
// must be one of those advertised through the wl_shm.format event.
//
// A buffer will keep a reference to the pool it was created from
// so it is valid to destroy the pool immediately after creating
// a buffer from it.
//
// id: buffer to create
// offset: buffer byte offset within the pool
// width: buffer width, in pixels
// height: buffer height, in pixels
// stride: number of bytes from the beginning of one row to the beginning of the next row
// format: buffer pixel format
func (i *WlShmPool) CreateBuffer(offset, width, height, stride int32, format uint32) (*WlBuffer, error) {
	wlBuffer := NewWlBuffer(i.Context())
	err := i.Context().SendRequest(i, 0, wlBuffer, offset, width, height, stride, format)
	return wlBuffer, err
}

// Destroy : destroy the pool
//
// Destroy the shared memory pool.
//
// The mmapped memory will be released when all
// buffers that have been created from this pool
// are gone.
//
func (i *WlShmPool) Destroy() error {
	err := i.Context().SendRequest(i, 1)
	return err
}

// Resize : change the size of the pool mapping
//
// This request will cause the server to remap the backing memory
// for the pool from the file descriptor passed when the pool was
// created, but using the new size.  This request can only be
// used to make the pool bigger.
//
// size: new size of the pool, in bytes
func (i *WlShmPool) Resize(size int32) error {
	err := i.Context().SendRequest(i, 2, size)
	return err
}

// WlShm : shared memory support
//
// A singleton global object that provides support for shared
// memory.
//
// Clients can create wl_shm_pool objects using the create_pool
// request.
//
// At connection setup time, the wl_shm object emits one or more
// format events to inform clients about the valid pixel formats
// that can be used for buffers.
type WlShm struct {
	BaseProxy
	mu             sync.RWMutex
	formatHandlers []WlShmFormatHandler
}

// NewWlShm : shared memory support
//
// A singleton global object that provides support for shared
// memory.
//
// Clients can create wl_shm_pool objects using the create_pool
// request.
//
// At connection setup time, the wl_shm object emits one or more
// format events to inform clients about the valid pixel formats
// that can be used for buffers.
func NewWlShm(ctx *Context) *WlShm {
	wlShm := &WlShm{}
	ctx.Register(wlShm)
	return wlShm
}

// CreatePool : create a shm pool
//
// Create a new wl_shm_pool object.
//
// The pool can be used to create shared memory based buffer
// objects.  The server will mmap size bytes of the passed file
// descriptor, to use as backing memory for the pool.
//
// id: pool to create
// fd: file descriptor for the pool
// size: pool size, in bytes
func (i *WlShm) CreatePool(fd uintptr, size int32) (*WlShmPool, error) {
	wlShmPool := NewWlShmPool(i.Context())
	err := i.Context().SendRequest(i, 0, wlShmPool, fd, size)
	return wlShmPool, err
}

// WlShmError : wl_shm error values
//
// These errors can be emitted in response to wl_shm requests.
const (
	// WlShmErrorInvalidFormat : buffer format is not known
	WlShmErrorInvalidFormat = 0
	// WlShmErrorInvalidStride : invalid size or stride during pool or buffer creation
	WlShmErrorInvalidStride = 1
	// WlShmErrorInvalidFd : mmapping the file descriptor failed
	WlShmErrorInvalidFd = 2
)

// WlShmFormat : pixel formats
//
// This describes the memory layout of an individual pixel.
//
// All renderers should support argb8888 and xrgb8888 but any other
// formats are optional and may not be supported by the particular
// renderer in use.
//
// The drm format codes match the macros defined in drm_fourcc.h, except
// argb8888 and xrgb8888. The formats actually supported by the compositor
// will be reported by the format event.
const (
	// WlShmFormatArgb8888 : 32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian
	WlShmFormatArgb8888 = 0
	// WlShmFormatXrgb8888 : 32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian
	WlShmFormatXrgb8888 = 1
	// WlShmFormatC8 : 8-bit color index format, [7:0] C
	WlShmFormatC8 = 0x20203843
	// WlShmFormatRgb332 : 8-bit RGB format, [7:0] R:G:B 3:3:2
	WlShmFormatRgb332 = 0x38424752
	// WlShmFormatBgr233 : 8-bit BGR format, [7:0] B:G:R 2:3:3
	WlShmFormatBgr233 = 0x38524742
	// WlShmFormatXrgb4444 : 16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian
	WlShmFormatXrgb4444 = 0x32315258
	// WlShmFormatXbgr4444 : 16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian
	WlShmFormatXbgr4444 = 0x32314258
	// WlShmFormatRgbx4444 : 16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian
	WlShmFormatRgbx4444 = 0x32315852
	// WlShmFormatBgrx4444 : 16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian
	WlShmFormatBgrx4444 = 0x32315842
	// WlShmFormatArgb4444 : 16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian
	WlShmFormatArgb4444 = 0x32315241
	// WlShmFormatAbgr4444 : 16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian
	WlShmFormatAbgr4444 = 0x32314241
	// WlShmFormatRgba4444 : 16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian
	WlShmFormatRgba4444 = 0x32314152
	// WlShmFormatBgra4444 : 16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian
	WlShmFormatBgra4444 = 0x32314142
	// WlShmFormatXrgb1555 : 16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian
	WlShmFormatXrgb1555 = 0x35315258
	// WlShmFormatXbgr1555 : 16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian
	WlShmFormatXbgr1555 = 0x35314258
	// WlShmFormatRgbx5551 : 16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian
	WlShmFormatRgbx5551 = 0x35315852
	// WlShmFormatBgrx5551 : 16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian
	WlShmFormatBgrx5551 = 0x35315842
	// WlShmFormatArgb1555 : 16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian
	WlShmFormatArgb1555 = 0x35315241
	// WlShmFormatAbgr1555 : 16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian
	WlShmFormatAbgr1555 = 0x35314241
	// WlShmFormatRgba5551 : 16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian
	WlShmFormatRgba5551 = 0x35314152
	// WlShmFormatBgra5551 : 16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian
	WlShmFormatBgra5551 = 0x35314142
	// WlShmFormatRgb565 : 16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian
	WlShmFormatRgb565 = 0x36314752
	// WlShmFormatBgr565 : 16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian
	WlShmFormatBgr565 = 0x36314742
	// WlShmFormatRgb888 : 24-bit RGB format, [23:0] R:G:B little endian
	WlShmFormatRgb888 = 0x34324752
	// WlShmFormatBgr888 : 24-bit BGR format, [23:0] B:G:R little endian
	WlShmFormatBgr888 = 0x34324742
	// WlShmFormatXbgr8888 : 32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian
	WlShmFormatXbgr8888 = 0x34324258
	// WlShmFormatRgbx8888 : 32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian
	WlShmFormatRgbx8888 = 0x34325852
	// WlShmFormatBgrx8888 : 32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian
	WlShmFormatBgrx8888 = 0x34325842
	// WlShmFormatAbgr8888 : 32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian
	WlShmFormatAbgr8888 = 0x34324241
	// WlShmFormatRgba8888 : 32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian
	WlShmFormatRgba8888 = 0x34324152
	// WlShmFormatBgra8888 : 32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian
	WlShmFormatBgra8888 = 0x34324142
	// WlShmFormatXrgb2101010 : 32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian
	WlShmFormatXrgb2101010 = 0x30335258
	// WlShmFormatXbgr2101010 : 32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian
	WlShmFormatXbgr2101010 = 0x30334258
	// WlShmFormatRgbx1010102 : 32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian
	WlShmFormatRgbx1010102 = 0x30335852
	// WlShmFormatBgrx1010102 : 32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian
	WlShmFormatBgrx1010102 = 0x30335842
	// WlShmFormatArgb2101010 : 32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian
	WlShmFormatArgb2101010 = 0x30335241
	// WlShmFormatAbgr2101010 : 32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian
	WlShmFormatAbgr2101010 = 0x30334241
	// WlShmFormatRgba1010102 : 32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian
	WlShmFormatRgba1010102 = 0x30334152
	// WlShmFormatBgra1010102 : 32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian
	WlShmFormatBgra1010102 = 0x30334142
	// WlShmFormatYuyv : packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian
	WlShmFormatYuyv = 0x56595559
	// WlShmFormatYvyu : packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian
	WlShmFormatYvyu = 0x55595659
	// WlShmFormatUyvy : packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian
	WlShmFormatUyvy = 0x59565955
	// WlShmFormatVyuy : packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian
	WlShmFormatVyuy = 0x59555956
	// WlShmFormatAyuv : packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian
	WlShmFormatAyuv = 0x56555941
	// WlShmFormatNv12 : 2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane
	WlShmFormatNv12 = 0x3231564e
	// WlShmFormatNv21 : 2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane
	WlShmFormatNv21 = 0x3132564e
	// WlShmFormatNv16 : 2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane
	WlShmFormatNv16 = 0x3631564e
	// WlShmFormatNv61 : 2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane
	WlShmFormatNv61 = 0x3136564e
	// WlShmFormatYuv410 : 3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes
	WlShmFormatYuv410 = 0x39565559
	// WlShmFormatYvu410 : 3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes
	WlShmFormatYvu410 = 0x39555659
	// WlShmFormatYuv411 : 3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes
	WlShmFormatYuv411 = 0x31315559
	// WlShmFormatYvu411 : 3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes
	WlShmFormatYvu411 = 0x31315659
	// WlShmFormatYuv420 : 3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes
	WlShmFormatYuv420 = 0x32315559
	// WlShmFormatYvu420 : 3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes
	WlShmFormatYvu420 = 0x32315659
	// WlShmFormatYuv422 : 3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes
	WlShmFormatYuv422 = 0x36315559
	// WlShmFormatYvu422 : 3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes
	WlShmFormatYvu422 = 0x36315659
	// WlShmFormatYuv444 : 3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes
	WlShmFormatYuv444 = 0x34325559
	// WlShmFormatYvu444 : 3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes
	WlShmFormatYvu444 = 0x34325659
	// WlShmFormatR8 : [7:0] R
	WlShmFormatR8 = 0x20203852
	// WlShmFormatR16 : [15:0] R little endian
	WlShmFormatR16 = 0x20363152
	// WlShmFormatRg88 : [15:0] R:G 8:8 little endian
	WlShmFormatRg88 = 0x38384752
	// WlShmFormatGr88 : [15:0] G:R 8:8 little endian
	WlShmFormatGr88 = 0x38385247
	// WlShmFormatRg1616 : [31:0] R:G 16:16 little endian
	WlShmFormatRg1616 = 0x32334752
	// WlShmFormatGr1616 : [31:0] G:R 16:16 little endian
	WlShmFormatGr1616 = 0x32335247
	// WlShmFormatXrgb16161616F : [63:0] x:R:G:B 16:16:16:16 little endian
	WlShmFormatXrgb16161616F = 0x48345258
	// WlShmFormatXbgr16161616F : [63:0] x:B:G:R 16:16:16:16 little endian
	WlShmFormatXbgr16161616F = 0x48344258
	// WlShmFormatArgb16161616F : [63:0] A:R:G:B 16:16:16:16 little endian
	WlShmFormatArgb16161616F = 0x48345241
	// WlShmFormatAbgr16161616F : [63:0] A:B:G:R 16:16:16:16 little endian
	WlShmFormatAbgr16161616F = 0x48344241
	// WlShmFormatXyuv8888 : [31:0] X:Y:Cb:Cr 8:8:8:8 little endian
	WlShmFormatXyuv8888 = 0x56555958
	// WlShmFormatVuy888 : [23:0] Cr:Cb:Y 8:8:8 little endian
	WlShmFormatVuy888 = 0x34325556
	// WlShmFormatVuy101010 : Y followed by U then V, 10:10:10.
	WlShmFormatVuy101010 = 0x30335556
	// WlShmFormatY210 : [63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 10:6:10:6:10:6:10:6 little endian per 2 Y pixels
	WlShmFormatY210 = 0x30313259
	// WlShmFormatY212 : [63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 12:4:12:4:12:4:12:4 little endian per 2 Y pixels
	WlShmFormatY212 = 0x32313259
	// WlShmFormatY216 : [63:0] Cr0:Y1:Cb0:Y0 16:16:16:16 little endian per 2 Y pixels
	WlShmFormatY216 = 0x36313259
	// WlShmFormatY410 : [31:0] A:Cr:Y:Cb 2:10:10:10 little endian
	WlShmFormatY410 = 0x30313459
	// WlShmFormatY412 : [63:0] A:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian
	WlShmFormatY412 = 0x32313459
	// WlShmFormatY416 : [63:0] A:Cr:Y:Cb 16:16:16:16 little endian
	WlShmFormatY416 = 0x36313459
	// WlShmFormatXvyu2101010 : [31:0] X:Cr:Y:Cb 2:10:10:10 little endian
	WlShmFormatXvyu2101010 = 0x30335658
	// WlShmFormatXvyu1216161616 : [63:0] X:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian
	WlShmFormatXvyu1216161616 = 0x36335658
	// WlShmFormatXvyu16161616 : [63:0] X:Cr:Y:Cb 16:16:16:16 little endian
	WlShmFormatXvyu16161616 = 0x38345658
	// WlShmFormatY0L0 : [63:0] A3:A2:Y3:0:Cr0:0:Y2:0:A1:A0:Y1:0:Cb0:0:Y0:0 1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian
	WlShmFormatY0L0 = 0x304c3059
	// WlShmFormatX0L0 : [63:0] X3:X2:Y3:0:Cr0:0:Y2:0:X1:X0:Y1:0:Cb0:0:Y0:0 1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian
	WlShmFormatX0L0 = 0x304c3058
	// WlShmFormatY0L2 : [63:0] A3:A2:Y3:Cr0:Y2:A1:A0:Y1:Cb0:Y0 1:1:10:10:10:1:1:10:10:10 little endian
	WlShmFormatY0L2 = 0x324c3059
	// WlShmFormatX0L2 : [63:0] X3:X2:Y3:Cr0:Y2:X1:X0:Y1:Cb0:Y0 1:1:10:10:10:1:1:10:10:10 little endian
	WlShmFormatX0L2        = 0x324c3058
	WlShmFormatYuv4208Bit  = 0x38305559
	WlShmFormatYuv42010Bit = 0x30315559
	WlShmFormatXrgb8888A8  = 0x38415258
	WlShmFormatXbgr8888A8  = 0x38414258
	WlShmFormatRgbx8888A8  = 0x38415852
	WlShmFormatBgrx8888A8  = 0x38415842
	WlShmFormatRgb888A8    = 0x38413852
	WlShmFormatBgr888A8    = 0x38413842
	WlShmFormatRgb565A8    = 0x38413552
	WlShmFormatBgr565A8    = 0x38413542
	// WlShmFormatNv24 : non-subsampled Cr:Cb plane
	WlShmFormatNv24 = 0x3432564e
	// WlShmFormatNv42 : non-subsampled Cb:Cr plane
	WlShmFormatNv42 = 0x3234564e
	// WlShmFormatP210 : 2x1 subsampled Cr:Cb plane, 10 bit per channel
	WlShmFormatP210 = 0x30313250
	// WlShmFormatP010 : 2x2 subsampled Cr:Cb plane 10 bits per channel
	WlShmFormatP010 = 0x30313050
	// WlShmFormatP012 : 2x2 subsampled Cr:Cb plane 12 bits per channel
	WlShmFormatP012 = 0x32313050
	// WlShmFormatP016 : 2x2 subsampled Cr:Cb plane 16 bits per channel
	WlShmFormatP016 = 0x36313050
	// WlShmFormatAxbxgxrx106106106106 : [63:0] A:x:B:x:G:x:R:x 10:6:10:6:10:6:10:6 little endian
	WlShmFormatAxbxgxrx106106106106 = 0x30314241
	// WlShmFormatNv15 : 2x2 subsampled Cr:Cb plane
	WlShmFormatNv15 = 0x3531564e
	WlShmFormatQ410 = 0x30313451
	WlShmFormatQ401 = 0x31303451
)

// WlShmFormatEvent : pixel format description
//
// Informs the client about a valid pixel format that
// can be used for buffers. Known formats include
// argb8888 and xrgb8888.
type WlShmFormatEvent struct {
	Format uint32
}

type WlShmFormatHandler interface {
	HandleWlShmFormat(WlShmFormatEvent)
}

// AddFormatHandler : pixel format description
//
// Informs the client about a valid pixel format that
// can be used for buffers. Known formats include
// argb8888 and xrgb8888.
func (i *WlShm) AddFormatHandler(h WlShmFormatHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.formatHandlers = append(i.formatHandlers, h)
	i.mu.Unlock()
}

func (i *WlShm) RemoveFormatHandler(h WlShmFormatHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.formatHandlers {
		if e == h {
			i.formatHandlers = append(i.formatHandlers[:j], i.formatHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlShm) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.formatHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlShmFormatEvent{
			Format: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.formatHandlers {
			i.mu.RUnlock()

			h.HandleWlShmFormat(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlBuffer : content for a wl_surface
//
// A buffer provides the content for a wl_surface. Buffers are
// created through factory interfaces such as wl_drm, wl_shm or
// similar. It has a width and a height and can be attached to a
// wl_surface, but the mechanism by which a client provides and
// updates the contents is defined by the buffer factory interface.
type WlBuffer struct {
	BaseProxy
	mu              sync.RWMutex
	releaseHandlers []WlBufferReleaseHandler
}

// NewWlBuffer : content for a wl_surface
//
// A buffer provides the content for a wl_surface. Buffers are
// created through factory interfaces such as wl_drm, wl_shm or
// similar. It has a width and a height and can be attached to a
// wl_surface, but the mechanism by which a client provides and
// updates the contents is defined by the buffer factory interface.
func NewWlBuffer(ctx *Context) *WlBuffer {
	wlBuffer := &WlBuffer{}
	ctx.Register(wlBuffer)
	return wlBuffer
}

// Destroy : destroy a buffer
//
// Destroy a buffer. If and how you need to release the backing
// storage is defined by the buffer factory interface.
//
// For possible side-effects to a surface, see wl_surface.attach.
//
func (i *WlBuffer) Destroy() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// WlBufferReleaseEvent : compositor releases buffer
//
// Sent when this wl_buffer is no longer used by the compositor.
// The client is now free to reuse or destroy this buffer and its
// backing storage.
//
// If a client receives a release event before the frame callback
// requested in the same wl_surface.commit that attaches this
// wl_buffer to a surface, then the client is immediately free to
// reuse the buffer and its backing storage, and does not need a
// second buffer for the next surface content update. Typically
// this is possible, when the compositor maintains a copy of the
// wl_surface contents, e.g. as a GL texture. This is an important
// optimization for GL(ES) compositors with wl_shm clients.
type WlBufferReleaseEvent struct{}
type WlBufferReleaseHandler interface {
	HandleWlBufferRelease(WlBufferReleaseEvent)
}

// AddReleaseHandler : compositor releases buffer
//
// Sent when this wl_buffer is no longer used by the compositor.
// The client is now free to reuse or destroy this buffer and its
// backing storage.
//
// If a client receives a release event before the frame callback
// requested in the same wl_surface.commit that attaches this
// wl_buffer to a surface, then the client is immediately free to
// reuse the buffer and its backing storage, and does not need a
// second buffer for the next surface content update. Typically
// this is possible, when the compositor maintains a copy of the
// wl_surface contents, e.g. as a GL texture. This is an important
// optimization for GL(ES) compositors with wl_shm clients.
func (i *WlBuffer) AddReleaseHandler(h WlBufferReleaseHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.releaseHandlers = append(i.releaseHandlers, h)
	i.mu.Unlock()
}

func (i *WlBuffer) RemoveReleaseHandler(h WlBufferReleaseHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.releaseHandlers {
		if e == h {
			i.releaseHandlers = append(i.releaseHandlers[:j], i.releaseHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlBuffer) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.releaseHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlBufferReleaseEvent{}

		i.mu.RLock()
		for _, h := range i.releaseHandlers {
			i.mu.RUnlock()

			h.HandleWlBufferRelease(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlDataOffer : offer to transfer data
//
// A wl_data_offer represents a piece of data offered for transfer
// by another client (the source client).  It is used by the
// copy-and-paste and drag-and-drop mechanisms.  The offer
// describes the different mime types that the data can be
// converted to and provides the mechanism for transferring the
// data directly from the source client.
type WlDataOffer struct {
	BaseProxy
	mu                    sync.RWMutex
	offerHandlers         []WlDataOfferOfferHandler
	sourceActionsHandlers []WlDataOfferSourceActionsHandler
	actionHandlers        []WlDataOfferActionHandler
}

// NewWlDataOffer : offer to transfer data
//
// A wl_data_offer represents a piece of data offered for transfer
// by another client (the source client).  It is used by the
// copy-and-paste and drag-and-drop mechanisms.  The offer
// describes the different mime types that the data can be
// converted to and provides the mechanism for transferring the
// data directly from the source client.
func NewWlDataOffer(ctx *Context) *WlDataOffer {
	wlDataOffer := &WlDataOffer{}
	ctx.Register(wlDataOffer)
	return wlDataOffer
}

// Accept : accept one of the offered mime types
//
// Indicate that the client can accept the given mime type, or
// NULL for not accepted.
//
// For objects of version 2 or older, this request is used by the
// client to give feedback whether the client can receive the given
// mime type, or NULL if none is accepted; the feedback does not
// determine whether the drag-and-drop operation succeeds or not.
//
// For objects of version 3 or newer, this request determines the
// final result of the drag-and-drop operation. If the end result
// is that no mime types were accepted, the drag-and-drop operation
// will be cancelled and the corresponding drag source will receive
// wl_data_source.cancelled. Clients may still use this event in
// conjunction with wl_data_source.action for feedback.
//
// serial: serial number of the accept request
// mimeType: mime type accepted by the client
func (i *WlDataOffer) Accept(serial uint32, mimeType string) error {
	err := i.Context().SendRequest(i, 0, serial, mimeType)
	return err
}

// Receive : request that the data is transferred
//
// To transfer the offered data, the client issues this request
// and indicates the mime type it wants to receive.  The transfer
// happens through the passed file descriptor (typically created
// with the pipe system call).  The source client writes the data
// in the mime type representation requested and then closes the
// file descriptor.
//
// The receiving client reads from the read end of the pipe until
// EOF and then closes its end, at which point the transfer is
// complete.
//
// This request may happen multiple times for different mime types,
// both before and after wl_data_device.drop. Drag-and-drop destination
// clients may preemptively fetch data or examine it more closely to
// determine acceptance.
//
// mimeType: mime type desired by receiver
// fd: file descriptor for data transfer
func (i *WlDataOffer) Receive(mimeType string, fd uintptr) error {
	err := i.Context().SendRequest(i, 1, mimeType, fd)
	return err
}

// Destroy : destroy data offer
//
// Destroy the data offer.
//
func (i *WlDataOffer) Destroy() error {
	err := i.Context().SendRequest(i, 2)
	return err
}

// Finish : the offer will no longer be used
//
// Notifies the compositor that the drag destination successfully
// finished the drag-and-drop operation.
//
// Upon receiving this request, the compositor will emit
// wl_data_source.dnd_finished on the drag source client.
//
// It is a client error to perform other requests than
// wl_data_offer.destroy after this one. It is also an error to perform
// this request after a NULL mime type has been set in
// wl_data_offer.accept or no action was received through
// wl_data_offer.action.
//
// If wl_data_offer.finish request is received for a non drag and drop
// operation, the invalid_finish protocol error is raised.
//
func (i *WlDataOffer) Finish() error {
	err := i.Context().SendRequest(i, 3)
	return err
}

// SetActions : set the available/preferred drag-and-drop actions
//
// Sets the actions that the destination side client supports for
// this operation. This request may trigger the emission of
// wl_data_source.action and wl_data_offer.action events if the compositor
// needs to change the selected action.
//
// This request can be called multiple times throughout the
// drag-and-drop operation, typically in response to wl_data_device.enter
// or wl_data_device.motion events.
//
// This request determines the final result of the drag-and-drop
// operation. If the end result is that no action is accepted,
// the drag source will receive wl_data_source.cancelled.
//
// The dnd_actions argument must contain only values expressed in the
// wl_data_device_manager.dnd_actions enum, and the preferred_action
// argument must only contain one of those values set, otherwise it
// will result in a protocol error.
//
// While managing an "ask" action, the destination drag-and-drop client
// may perform further wl_data_offer.receive requests, and is expected
// to perform one last wl_data_offer.set_actions request with a preferred
// action other than "ask" (and optionally wl_data_offer.accept) before
// requesting wl_data_offer.finish, in order to convey the action selected
// by the user. If the preferred action is not in the
// wl_data_offer.source_actions mask, an error will be raised.
//
// If the "ask" action is dismissed (e.g. user cancellation), the client
// is expected to perform wl_data_offer.destroy right away.
//
// This request can only be made on drag-and-drop offers, a protocol error
// will be raised otherwise.
//
// dndActions: actions supported by the destination client
// preferredAction: action preferred by the destination client
func (i *WlDataOffer) SetActions(dndActions, preferredAction uint32) error {
	err := i.Context().SendRequest(i, 4, dndActions, preferredAction)
	return err
}

// WlDataOfferError :
const (
	// WlDataOfferErrorInvalidFinish : finish request was called untimely
	WlDataOfferErrorInvalidFinish = 0
	// WlDataOfferErrorInvalidActionMask : action mask contains invalid values
	WlDataOfferErrorInvalidActionMask = 1
	// WlDataOfferErrorInvalidAction : action argument has an invalid value
	WlDataOfferErrorInvalidAction = 2
	// WlDataOfferErrorInvalidOffer : offer doesn't accept this request
	WlDataOfferErrorInvalidOffer = 3
)

// WlDataOfferOfferEvent : advertise offered mime type
//
// Sent immediately after creating the wl_data_offer object.  One
// event per offered mime type.
type WlDataOfferOfferEvent struct {
	MimeType string
}

type WlDataOfferOfferHandler interface {
	HandleWlDataOfferOffer(WlDataOfferOfferEvent)
}

// AddOfferHandler : advertise offered mime type
//
// Sent immediately after creating the wl_data_offer object.  One
// event per offered mime type.
func (i *WlDataOffer) AddOfferHandler(h WlDataOfferOfferHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.offerHandlers = append(i.offerHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataOffer) RemoveOfferHandler(h WlDataOfferOfferHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.offerHandlers {
		if e == h {
			i.offerHandlers = append(i.offerHandlers[:j], i.offerHandlers[j+1:]...)
			break
		}
	}
}

// WlDataOfferSourceActionsEvent : notify the source-side available actions
//
// This event indicates the actions offered by the data source. It
// will be sent right after wl_data_device.enter, or anytime the source
// side changes its offered actions through wl_data_source.set_actions.
type WlDataOfferSourceActionsEvent struct {
	SourceActions uint32
}

type WlDataOfferSourceActionsHandler interface {
	HandleWlDataOfferSourceActions(WlDataOfferSourceActionsEvent)
}

// AddSourceActionsHandler : notify the source-side available actions
//
// This event indicates the actions offered by the data source. It
// will be sent right after wl_data_device.enter, or anytime the source
// side changes its offered actions through wl_data_source.set_actions.
func (i *WlDataOffer) AddSourceActionsHandler(h WlDataOfferSourceActionsHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.sourceActionsHandlers = append(i.sourceActionsHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataOffer) RemoveSourceActionsHandler(h WlDataOfferSourceActionsHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.sourceActionsHandlers {
		if e == h {
			i.sourceActionsHandlers = append(i.sourceActionsHandlers[:j], i.sourceActionsHandlers[j+1:]...)
			break
		}
	}
}

// WlDataOfferActionEvent : notify the selected action
//
// This event indicates the action selected by the compositor after
// matching the source/destination side actions. Only one action (or
// none) will be offered here.
//
// This event can be emitted multiple times during the drag-and-drop
// operation in response to destination side action changes through
// wl_data_offer.set_actions.
//
// This event will no longer be emitted after wl_data_device.drop
// happened on the drag-and-drop destination, the client must
// honor the last action received, or the last preferred one set
// through wl_data_offer.set_actions when handling an "ask" action.
//
// Compositors may also change the selected action on the fly, mainly
// in response to keyboard modifier changes during the drag-and-drop
// operation.
//
// The most recent action received is always the valid one. Prior to
// receiving wl_data_device.drop, the chosen action may change (e.g.
// due to keyboard modifiers being pressed). At the time of receiving
// wl_data_device.drop the drag-and-drop destination must honor the
// last action received.
//
// Action changes may still happen after wl_data_device.drop,
// especially on "ask" actions, where the drag-and-drop destination
// may choose another action afterwards. Action changes happening
// at this stage are always the result of inter-client negotiation, the
// compositor shall no longer be able to induce a different action.
//
// Upon "ask" actions, it is expected that the drag-and-drop destination
// may potentially choose a different action and/or mime type,
// based on wl_data_offer.source_actions and finally chosen by the
// user (e.g. popping up a menu with the available options). The
// final wl_data_offer.set_actions and wl_data_offer.accept requests
// must happen before the call to wl_data_offer.finish.
type WlDataOfferActionEvent struct {
	DndAction uint32
}

type WlDataOfferActionHandler interface {
	HandleWlDataOfferAction(WlDataOfferActionEvent)
}

// AddActionHandler : notify the selected action
//
// This event indicates the action selected by the compositor after
// matching the source/destination side actions. Only one action (or
// none) will be offered here.
//
// This event can be emitted multiple times during the drag-and-drop
// operation in response to destination side action changes through
// wl_data_offer.set_actions.
//
// This event will no longer be emitted after wl_data_device.drop
// happened on the drag-and-drop destination, the client must
// honor the last action received, or the last preferred one set
// through wl_data_offer.set_actions when handling an "ask" action.
//
// Compositors may also change the selected action on the fly, mainly
// in response to keyboard modifier changes during the drag-and-drop
// operation.
//
// The most recent action received is always the valid one. Prior to
// receiving wl_data_device.drop, the chosen action may change (e.g.
// due to keyboard modifiers being pressed). At the time of receiving
// wl_data_device.drop the drag-and-drop destination must honor the
// last action received.
//
// Action changes may still happen after wl_data_device.drop,
// especially on "ask" actions, where the drag-and-drop destination
// may choose another action afterwards. Action changes happening
// at this stage are always the result of inter-client negotiation, the
// compositor shall no longer be able to induce a different action.
//
// Upon "ask" actions, it is expected that the drag-and-drop destination
// may potentially choose a different action and/or mime type,
// based on wl_data_offer.source_actions and finally chosen by the
// user (e.g. popping up a menu with the available options). The
// final wl_data_offer.set_actions and wl_data_offer.accept requests
// must happen before the call to wl_data_offer.finish.
func (i *WlDataOffer) AddActionHandler(h WlDataOfferActionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.actionHandlers = append(i.actionHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataOffer) RemoveActionHandler(h WlDataOfferActionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.actionHandlers {
		if e == h {
			i.actionHandlers = append(i.actionHandlers[:j], i.actionHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlDataOffer) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.offerHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataOfferOfferEvent{
			MimeType: event.String(),
		}

		i.mu.RLock()
		for _, h := range i.offerHandlers {
			i.mu.RUnlock()

			h.HandleWlDataOfferOffer(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.sourceActionsHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataOfferSourceActionsEvent{
			SourceActions: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.sourceActionsHandlers {
			i.mu.RUnlock()

			h.HandleWlDataOfferSourceActions(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.actionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataOfferActionEvent{
			DndAction: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.actionHandlers {
			i.mu.RUnlock()

			h.HandleWlDataOfferAction(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlDataSource : offer to transfer data
//
// The wl_data_source object is the source side of a wl_data_offer.
// It is created by the source client in a data transfer and
// provides a way to describe the offered data and a way to respond
// to requests to transfer the data.
type WlDataSource struct {
	BaseProxy
	mu                       sync.RWMutex
	targetHandlers           []WlDataSourceTargetHandler
	sendHandlers             []WlDataSourceSendHandler
	cancelledHandlers        []WlDataSourceCancelledHandler
	dndDropPerformedHandlers []WlDataSourceDndDropPerformedHandler
	dndFinishedHandlers      []WlDataSourceDndFinishedHandler
	actionHandlers           []WlDataSourceActionHandler
}

// NewWlDataSource : offer to transfer data
//
// The wl_data_source object is the source side of a wl_data_offer.
// It is created by the source client in a data transfer and
// provides a way to describe the offered data and a way to respond
// to requests to transfer the data.
func NewWlDataSource(ctx *Context) *WlDataSource {
	wlDataSource := &WlDataSource{}
	ctx.Register(wlDataSource)
	return wlDataSource
}

// Offer : add an offered mime type
//
// This request adds a mime type to the set of mime types
// advertised to targets.  Can be called several times to offer
// multiple types.
//
// mimeType: mime type offered by the data source
func (i *WlDataSource) Offer(mimeType string) error {
	err := i.Context().SendRequest(i, 0, mimeType)
	return err
}

// Destroy : destroy the data source
//
// Destroy the data source.
//
func (i *WlDataSource) Destroy() error {
	err := i.Context().SendRequest(i, 1)
	return err
}

// SetActions : set the available drag-and-drop actions
//
// Sets the actions that the source side client supports for this
// operation. This request may trigger wl_data_source.action and
// wl_data_offer.action events if the compositor needs to change the
// selected action.
//
// The dnd_actions argument must contain only values expressed in the
// wl_data_device_manager.dnd_actions enum, otherwise it will result
// in a protocol error.
//
// This request must be made once only, and can only be made on sources
// used in drag-and-drop, so it must be performed before
// wl_data_device.start_drag. Attempting to use the source other than
// for drag-and-drop will raise a protocol error.
//
// dndActions: actions supported by the data source
func (i *WlDataSource) SetActions(dndActions uint32) error {
	err := i.Context().SendRequest(i, 2, dndActions)
	return err
}

// WlDataSourceError :
const (
	// WlDataSourceErrorInvalidActionMask : action mask contains invalid values
	WlDataSourceErrorInvalidActionMask = 0
	// WlDataSourceErrorInvalidSource : source doesn't accept this request
	WlDataSourceErrorInvalidSource = 1
)

// WlDataSourceTargetEvent : a target accepts an offered mime type
//
// Sent when a target accepts pointer_focus or motion events.  If
// a target does not accept any of the offered types, type is NULL.
//
// Used for feedback during drag-and-drop.
type WlDataSourceTargetEvent struct {
	MimeType string
}

type WlDataSourceTargetHandler interface {
	HandleWlDataSourceTarget(WlDataSourceTargetEvent)
}

// AddTargetHandler : a target accepts an offered mime type
//
// Sent when a target accepts pointer_focus or motion events.  If
// a target does not accept any of the offered types, type is NULL.
//
// Used for feedback during drag-and-drop.
func (i *WlDataSource) AddTargetHandler(h WlDataSourceTargetHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.targetHandlers = append(i.targetHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveTargetHandler(h WlDataSourceTargetHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.targetHandlers {
		if e == h {
			i.targetHandlers = append(i.targetHandlers[:j], i.targetHandlers[j+1:]...)
			break
		}
	}
}

// WlDataSourceSendEvent : send the data
//
// Request for data from the client.  Send the data as the
// specified mime type over the passed file descriptor, then
// close it.
type WlDataSourceSendEvent struct {
	MimeType string
	Fd       uintptr
}

type WlDataSourceSendHandler interface {
	HandleWlDataSourceSend(WlDataSourceSendEvent)
}

// AddSendHandler : send the data
//
// Request for data from the client.  Send the data as the
// specified mime type over the passed file descriptor, then
// close it.
func (i *WlDataSource) AddSendHandler(h WlDataSourceSendHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.sendHandlers = append(i.sendHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveSendHandler(h WlDataSourceSendHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.sendHandlers {
		if e == h {
			i.sendHandlers = append(i.sendHandlers[:j], i.sendHandlers[j+1:]...)
			break
		}
	}
}

// WlDataSourceCancelledEvent : selection was cancelled
//
// This data source is no longer valid. There are several reasons why
// this could happen:
//
// - The data source has been replaced by another data source.
// - The drag-and-drop operation was performed, but the drop destination
// did not accept any of the mime types offered through
// wl_data_source.target.
// - The drag-and-drop operation was performed, but the drop destination
// did not select any of the actions present in the mask offered through
// wl_data_source.action.
// - The drag-and-drop operation was performed but didn't happen over a
// surface.
// - The compositor cancelled the drag-and-drop operation (e.g. compositor
// dependent timeouts to avoid stale drag-and-drop transfers).
//
// The client should clean up and destroy this data source.
//
// For objects of version 2 or older, wl_data_source.cancelled will
// only be emitted if the data source was replaced by another data
// source.
type WlDataSourceCancelledEvent struct{}
type WlDataSourceCancelledHandler interface {
	HandleWlDataSourceCancelled(WlDataSourceCancelledEvent)
}

// AddCancelledHandler : selection was cancelled
//
// This data source is no longer valid. There are several reasons why
// this could happen:
//
// - The data source has been replaced by another data source.
// - The drag-and-drop operation was performed, but the drop destination
// did not accept any of the mime types offered through
// wl_data_source.target.
// - The drag-and-drop operation was performed, but the drop destination
// did not select any of the actions present in the mask offered through
// wl_data_source.action.
// - The drag-and-drop operation was performed but didn't happen over a
// surface.
// - The compositor cancelled the drag-and-drop operation (e.g. compositor
// dependent timeouts to avoid stale drag-and-drop transfers).
//
// The client should clean up and destroy this data source.
//
// For objects of version 2 or older, wl_data_source.cancelled will
// only be emitted if the data source was replaced by another data
// source.
func (i *WlDataSource) AddCancelledHandler(h WlDataSourceCancelledHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.cancelledHandlers = append(i.cancelledHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveCancelledHandler(h WlDataSourceCancelledHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.cancelledHandlers {
		if e == h {
			i.cancelledHandlers = append(i.cancelledHandlers[:j], i.cancelledHandlers[j+1:]...)
			break
		}
	}
}

// WlDataSourceDndDropPerformedEvent : the drag-and-drop operation physically finished
//
// The user performed the drop action. This event does not indicate
// acceptance, wl_data_source.cancelled may still be emitted afterwards
// if the drop destination does not accept any mime type.
//
// However, this event might however not be received if the compositor
// cancelled the drag-and-drop operation before this event could happen.
//
// Note that the data_source may still be used in the future and should
// not be destroyed here.
type WlDataSourceDndDropPerformedEvent struct{}
type WlDataSourceDndDropPerformedHandler interface {
	HandleWlDataSourceDndDropPerformed(WlDataSourceDndDropPerformedEvent)
}

// AddDndDropPerformedHandler : the drag-and-drop operation physically finished
//
// The user performed the drop action. This event does not indicate
// acceptance, wl_data_source.cancelled may still be emitted afterwards
// if the drop destination does not accept any mime type.
//
// However, this event might however not be received if the compositor
// cancelled the drag-and-drop operation before this event could happen.
//
// Note that the data_source may still be used in the future and should
// not be destroyed here.
func (i *WlDataSource) AddDndDropPerformedHandler(h WlDataSourceDndDropPerformedHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.dndDropPerformedHandlers = append(i.dndDropPerformedHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveDndDropPerformedHandler(h WlDataSourceDndDropPerformedHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.dndDropPerformedHandlers {
		if e == h {
			i.dndDropPerformedHandlers = append(i.dndDropPerformedHandlers[:j], i.dndDropPerformedHandlers[j+1:]...)
			break
		}
	}
}

// WlDataSourceDndFinishedEvent : the drag-and-drop operation concluded
//
// The drop destination finished interoperating with this data
// source, so the client is now free to destroy this data source and
// free all associated data.
//
// If the action used to perform the operation was "move", the
// source can now delete the transferred data.
type WlDataSourceDndFinishedEvent struct{}
type WlDataSourceDndFinishedHandler interface {
	HandleWlDataSourceDndFinished(WlDataSourceDndFinishedEvent)
}

// AddDndFinishedHandler : the drag-and-drop operation concluded
//
// The drop destination finished interoperating with this data
// source, so the client is now free to destroy this data source and
// free all associated data.
//
// If the action used to perform the operation was "move", the
// source can now delete the transferred data.
func (i *WlDataSource) AddDndFinishedHandler(h WlDataSourceDndFinishedHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.dndFinishedHandlers = append(i.dndFinishedHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveDndFinishedHandler(h WlDataSourceDndFinishedHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.dndFinishedHandlers {
		if e == h {
			i.dndFinishedHandlers = append(i.dndFinishedHandlers[:j], i.dndFinishedHandlers[j+1:]...)
			break
		}
	}
}

// WlDataSourceActionEvent : notify the selected action
//
// This event indicates the action selected by the compositor after
// matching the source/destination side actions. Only one action (or
// none) will be offered here.
//
// This event can be emitted multiple times during the drag-and-drop
// operation, mainly in response to destination side changes through
// wl_data_offer.set_actions, and as the data device enters/leaves
// surfaces.
//
// It is only possible to receive this event after
// wl_data_source.dnd_drop_performed if the drag-and-drop operation
// ended in an "ask" action, in which case the final wl_data_source.action
// event will happen immediately before wl_data_source.dnd_finished.
//
// Compositors may also change the selected action on the fly, mainly
// in response to keyboard modifier changes during the drag-and-drop
// operation.
//
// The most recent action received is always the valid one. The chosen
// action may change alongside negotiation (e.g. an "ask" action can turn
// into a "move" operation), so the effects of the final action must
// always be applied in wl_data_offer.dnd_finished.
//
// Clients can trigger cursor surface changes from this point, so
// they reflect the current action.
type WlDataSourceActionEvent struct {
	DndAction uint32
}

type WlDataSourceActionHandler interface {
	HandleWlDataSourceAction(WlDataSourceActionEvent)
}

// AddActionHandler : notify the selected action
//
// This event indicates the action selected by the compositor after
// matching the source/destination side actions. Only one action (or
// none) will be offered here.
//
// This event can be emitted multiple times during the drag-and-drop
// operation, mainly in response to destination side changes through
// wl_data_offer.set_actions, and as the data device enters/leaves
// surfaces.
//
// It is only possible to receive this event after
// wl_data_source.dnd_drop_performed if the drag-and-drop operation
// ended in an "ask" action, in which case the final wl_data_source.action
// event will happen immediately before wl_data_source.dnd_finished.
//
// Compositors may also change the selected action on the fly, mainly
// in response to keyboard modifier changes during the drag-and-drop
// operation.
//
// The most recent action received is always the valid one. The chosen
// action may change alongside negotiation (e.g. an "ask" action can turn
// into a "move" operation), so the effects of the final action must
// always be applied in wl_data_offer.dnd_finished.
//
// Clients can trigger cursor surface changes from this point, so
// they reflect the current action.
func (i *WlDataSource) AddActionHandler(h WlDataSourceActionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.actionHandlers = append(i.actionHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataSource) RemoveActionHandler(h WlDataSourceActionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.actionHandlers {
		if e == h {
			i.actionHandlers = append(i.actionHandlers[:j], i.actionHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlDataSource) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.targetHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceTargetEvent{
			MimeType: event.String(),
		}

		i.mu.RLock()
		for _, h := range i.targetHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceTarget(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.sendHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceSendEvent{
			MimeType: event.String(),
			Fd:       event.FD(),
		}

		i.mu.RLock()
		for _, h := range i.sendHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceSend(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.cancelledHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceCancelledEvent{}

		i.mu.RLock()
		for _, h := range i.cancelledHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceCancelled(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.dndDropPerformedHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceDndDropPerformedEvent{}

		i.mu.RLock()
		for _, h := range i.dndDropPerformedHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceDndDropPerformed(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 4:
		i.mu.RLock()
		if len(i.dndFinishedHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceDndFinishedEvent{}

		i.mu.RLock()
		for _, h := range i.dndFinishedHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceDndFinished(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 5:
		i.mu.RLock()
		if len(i.actionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataSourceActionEvent{
			DndAction: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.actionHandlers {
			i.mu.RUnlock()

			h.HandleWlDataSourceAction(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlDataDevice : data transfer device
//
// There is one wl_data_device per seat which can be obtained
// from the global wl_data_device_manager singleton.
//
// A wl_data_device provides access to inter-client data transfer
// mechanisms such as copy-and-paste and drag-and-drop.
type WlDataDevice struct {
	BaseProxy
	mu                sync.RWMutex
	dataOfferHandlers []WlDataDeviceDataOfferHandler
	enterHandlers     []WlDataDeviceEnterHandler
	leaveHandlers     []WlDataDeviceLeaveHandler
	motionHandlers    []WlDataDeviceMotionHandler
	dropHandlers      []WlDataDeviceDropHandler
	selectionHandlers []WlDataDeviceSelectionHandler
}

// NewWlDataDevice : data transfer device
//
// There is one wl_data_device per seat which can be obtained
// from the global wl_data_device_manager singleton.
//
// A wl_data_device provides access to inter-client data transfer
// mechanisms such as copy-and-paste and drag-and-drop.
func NewWlDataDevice(ctx *Context) *WlDataDevice {
	wlDataDevice := &WlDataDevice{}
	ctx.Register(wlDataDevice)
	return wlDataDevice
}

// StartDrag : start drag-and-drop operation
//
// This request asks the compositor to start a drag-and-drop
// operation on behalf of the client.
//
// The source argument is the data source that provides the data
// for the eventual data transfer. If source is NULL, enter, leave
// and motion events are sent only to the client that initiated the
// drag and the client is expected to handle the data passing
// internally. If source is destroyed, the drag-and-drop session will be
// cancelled.
//
// The origin surface is the surface where the drag originates and
// the client must have an active implicit grab that matches the
// serial.
//
// The icon surface is an optional (can be NULL) surface that
// provides an icon to be moved around with the cursor.  Initially,
// the top-left corner of the icon surface is placed at the cursor
// hotspot, but subsequent wl_surface.attach request can move the
// relative position. Attach requests must be confirmed with
// wl_surface.commit as usual. The icon surface is given the role of
// a drag-and-drop icon. If the icon surface already has another role,
// it raises a protocol error.
//
// The current and pending input regions of the icon wl_surface are
// cleared, and wl_surface.set_input_region is ignored until the
// wl_surface is no longer used as the icon surface. When the use
// as an icon ends, the current and pending input regions become
// undefined, and the wl_surface is unmapped.
//
// source: data source for the eventual transfer
// origin: surface where the drag originates
// icon: drag-and-drop icon surface
// serial: serial number of the implicit grab on the origin
func (i *WlDataDevice) StartDrag(source *WlDataSource, origin, icon *WlSurface, serial uint32) error {
	err := i.Context().SendRequest(i, 0, source, origin, icon, serial)
	return err
}

// SetSelection : copy data to the selection
//
// This request asks the compositor to set the selection
// to the data from the source on behalf of the client.
//
// To unset the selection, set the source to NULL.
//
// source: data source for the selection
// serial: serial number of the event that triggered this request
func (i *WlDataDevice) SetSelection(source *WlDataSource, serial uint32) error {
	err := i.Context().SendRequest(i, 1, source, serial)
	return err
}

// Release : destroy data device
//
// This request destroys the data device.
//
func (i *WlDataDevice) Release() error {
	err := i.Context().SendRequest(i, 2)
	return err
}

// WlDataDeviceError :
const (
	// WlDataDeviceErrorRole : given wl_surface has another role
	WlDataDeviceErrorRole = 0
)

// WlDataDeviceDataOfferEvent : introduce a new wl_data_offer
//
// The data_offer event introduces a new wl_data_offer object,
// which will subsequently be used in either the
// data_device.enter event (for drag-and-drop) or the
// data_device.selection event (for selections).  Immediately
// following the data_device_data_offer event, the new data_offer
// object will send out data_offer.offer events to describe the
// mime types it offers.
type WlDataDeviceDataOfferEvent struct {
	ID *WlDataOffer
}

type WlDataDeviceDataOfferHandler interface {
	HandleWlDataDeviceDataOffer(WlDataDeviceDataOfferEvent)
}

// AddDataOfferHandler : introduce a new wl_data_offer
//
// The data_offer event introduces a new wl_data_offer object,
// which will subsequently be used in either the
// data_device.enter event (for drag-and-drop) or the
// data_device.selection event (for selections).  Immediately
// following the data_device_data_offer event, the new data_offer
// object will send out data_offer.offer events to describe the
// mime types it offers.
func (i *WlDataDevice) AddDataOfferHandler(h WlDataDeviceDataOfferHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.dataOfferHandlers = append(i.dataOfferHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveDataOfferHandler(h WlDataDeviceDataOfferHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.dataOfferHandlers {
		if e == h {
			i.dataOfferHandlers = append(i.dataOfferHandlers[:j], i.dataOfferHandlers[j+1:]...)
			break
		}
	}
}

// WlDataDeviceEnterEvent : initiate drag-and-drop session
//
// This event is sent when an active drag-and-drop pointer enters
// a surface owned by the client.  The position of the pointer at
// enter time is provided by the x and y arguments, in surface-local
// coordinates.
type WlDataDeviceEnterEvent struct {
	Serial  uint32
	Surface *WlSurface
	X       float32
	Y       float32
	ID      *WlDataOffer
}

type WlDataDeviceEnterHandler interface {
	HandleWlDataDeviceEnter(WlDataDeviceEnterEvent)
}

// AddEnterHandler : initiate drag-and-drop session
//
// This event is sent when an active drag-and-drop pointer enters
// a surface owned by the client.  The position of the pointer at
// enter time is provided by the x and y arguments, in surface-local
// coordinates.
func (i *WlDataDevice) AddEnterHandler(h WlDataDeviceEnterHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.enterHandlers = append(i.enterHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveEnterHandler(h WlDataDeviceEnterHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.enterHandlers {
		if e == h {
			i.enterHandlers = append(i.enterHandlers[:j], i.enterHandlers[j+1:]...)
			break
		}
	}
}

// WlDataDeviceLeaveEvent : end drag-and-drop session
//
// This event is sent when the drag-and-drop pointer leaves the
// surface and the session ends.  The client must destroy the
// wl_data_offer introduced at enter time at this point.
type WlDataDeviceLeaveEvent struct{}
type WlDataDeviceLeaveHandler interface {
	HandleWlDataDeviceLeave(WlDataDeviceLeaveEvent)
}

// AddLeaveHandler : end drag-and-drop session
//
// This event is sent when the drag-and-drop pointer leaves the
// surface and the session ends.  The client must destroy the
// wl_data_offer introduced at enter time at this point.
func (i *WlDataDevice) AddLeaveHandler(h WlDataDeviceLeaveHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.leaveHandlers = append(i.leaveHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveLeaveHandler(h WlDataDeviceLeaveHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.leaveHandlers {
		if e == h {
			i.leaveHandlers = append(i.leaveHandlers[:j], i.leaveHandlers[j+1:]...)
			break
		}
	}
}

// WlDataDeviceMotionEvent : drag-and-drop session motion
//
// This event is sent when the drag-and-drop pointer moves within
// the currently focused surface. The new position of the pointer
// is provided by the x and y arguments, in surface-local
// coordinates.
type WlDataDeviceMotionEvent struct {
	Time uint32
	X    float32
	Y    float32
}

type WlDataDeviceMotionHandler interface {
	HandleWlDataDeviceMotion(WlDataDeviceMotionEvent)
}

// AddMotionHandler : drag-and-drop session motion
//
// This event is sent when the drag-and-drop pointer moves within
// the currently focused surface. The new position of the pointer
// is provided by the x and y arguments, in surface-local
// coordinates.
func (i *WlDataDevice) AddMotionHandler(h WlDataDeviceMotionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.motionHandlers = append(i.motionHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveMotionHandler(h WlDataDeviceMotionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.motionHandlers {
		if e == h {
			i.motionHandlers = append(i.motionHandlers[:j], i.motionHandlers[j+1:]...)
			break
		}
	}
}

// WlDataDeviceDropEvent : end drag-and-drop session successfully
//
// The event is sent when a drag-and-drop operation is ended
// because the implicit grab is removed.
//
// The drag-and-drop destination is expected to honor the last action
// received through wl_data_offer.action, if the resulting action is
// "copy" or "move", the destination can still perform
// wl_data_offer.receive requests, and is expected to end all
// transfers with a wl_data_offer.finish request.
//
// If the resulting action is "ask", the action will not be considered
// final. The drag-and-drop destination is expected to perform one last
// wl_data_offer.set_actions request, or wl_data_offer.destroy in order
// to cancel the operation.
type WlDataDeviceDropEvent struct{}
type WlDataDeviceDropHandler interface {
	HandleWlDataDeviceDrop(WlDataDeviceDropEvent)
}

// AddDropHandler : end drag-and-drop session successfully
//
// The event is sent when a drag-and-drop operation is ended
// because the implicit grab is removed.
//
// The drag-and-drop destination is expected to honor the last action
// received through wl_data_offer.action, if the resulting action is
// "copy" or "move", the destination can still perform
// wl_data_offer.receive requests, and is expected to end all
// transfers with a wl_data_offer.finish request.
//
// If the resulting action is "ask", the action will not be considered
// final. The drag-and-drop destination is expected to perform one last
// wl_data_offer.set_actions request, or wl_data_offer.destroy in order
// to cancel the operation.
func (i *WlDataDevice) AddDropHandler(h WlDataDeviceDropHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.dropHandlers = append(i.dropHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveDropHandler(h WlDataDeviceDropHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.dropHandlers {
		if e == h {
			i.dropHandlers = append(i.dropHandlers[:j], i.dropHandlers[j+1:]...)
			break
		}
	}
}

// WlDataDeviceSelectionEvent : advertise new selection
//
// The selection event is sent out to notify the client of a new
// wl_data_offer for the selection for this device.  The
// data_device.data_offer and the data_offer.offer events are
// sent out immediately before this event to introduce the data
// offer object.  The selection event is sent to a client
// immediately before receiving keyboard focus and when a new
// selection is set while the client has keyboard focus.  The
// data_offer is valid until a new data_offer or NULL is received
// or until the client loses keyboard focus.  The client must
// destroy the previous selection data_offer, if any, upon receiving
// this event.
type WlDataDeviceSelectionEvent struct {
	ID *WlDataOffer
}

type WlDataDeviceSelectionHandler interface {
	HandleWlDataDeviceSelection(WlDataDeviceSelectionEvent)
}

// AddSelectionHandler : advertise new selection
//
// The selection event is sent out to notify the client of a new
// wl_data_offer for the selection for this device.  The
// data_device.data_offer and the data_offer.offer events are
// sent out immediately before this event to introduce the data
// offer object.  The selection event is sent to a client
// immediately before receiving keyboard focus and when a new
// selection is set while the client has keyboard focus.  The
// data_offer is valid until a new data_offer or NULL is received
// or until the client loses keyboard focus.  The client must
// destroy the previous selection data_offer, if any, upon receiving
// this event.
func (i *WlDataDevice) AddSelectionHandler(h WlDataDeviceSelectionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.selectionHandlers = append(i.selectionHandlers, h)
	i.mu.Unlock()
}

func (i *WlDataDevice) RemoveSelectionHandler(h WlDataDeviceSelectionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.selectionHandlers {
		if e == h {
			i.selectionHandlers = append(i.selectionHandlers[:j], i.selectionHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlDataDevice) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.dataOfferHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceDataOfferEvent{
			ID: event.Proxy(i.Context()).(*WlDataOffer),
		}

		i.mu.RLock()
		for _, h := range i.dataOfferHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceDataOffer(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.enterHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceEnterEvent{
			Serial:  event.Uint32(),
			Surface: event.Proxy(i.Context()).(*WlSurface),
			X:       event.Float32(),
			Y:       event.Float32(),
			ID:      event.Proxy(i.Context()).(*WlDataOffer),
		}

		i.mu.RLock()
		for _, h := range i.enterHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceEnter(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.leaveHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceLeaveEvent{}

		i.mu.RLock()
		for _, h := range i.leaveHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceLeave(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.motionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceMotionEvent{
			Time: event.Uint32(),
			X:    event.Float32(),
			Y:    event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.motionHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceMotion(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 4:
		i.mu.RLock()
		if len(i.dropHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceDropEvent{}

		i.mu.RLock()
		for _, h := range i.dropHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceDrop(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 5:
		i.mu.RLock()
		if len(i.selectionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlDataDeviceSelectionEvent{
			ID: event.Proxy(i.Context()).(*WlDataOffer),
		}

		i.mu.RLock()
		for _, h := range i.selectionHandlers {
			i.mu.RUnlock()

			h.HandleWlDataDeviceSelection(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlDataDeviceManager : data transfer interface
//
// The wl_data_device_manager is a singleton global object that
// provides access to inter-client data transfer mechanisms such as
// copy-and-paste and drag-and-drop.  These mechanisms are tied to
// a wl_seat and this interface lets a client get a wl_data_device
// corresponding to a wl_seat.
//
// Depending on the version bound, the objects created from the bound
// wl_data_device_manager object will have different requirements for
// functioning properly. See wl_data_source.set_actions,
// wl_data_offer.accept and wl_data_offer.finish for details.
type WlDataDeviceManager struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlDataDeviceManager : data transfer interface
//
// The wl_data_device_manager is a singleton global object that
// provides access to inter-client data transfer mechanisms such as
// copy-and-paste and drag-and-drop.  These mechanisms are tied to
// a wl_seat and this interface lets a client get a wl_data_device
// corresponding to a wl_seat.
//
// Depending on the version bound, the objects created from the bound
// wl_data_device_manager object will have different requirements for
// functioning properly. See wl_data_source.set_actions,
// wl_data_offer.accept and wl_data_offer.finish for details.
func NewWlDataDeviceManager(ctx *Context) *WlDataDeviceManager {
	wlDataDeviceManager := &WlDataDeviceManager{}
	ctx.Register(wlDataDeviceManager)
	return wlDataDeviceManager
}

// CreateDataSource : create a new data source
//
// Create a new data source.
//
// id: data source to create
func (i *WlDataDeviceManager) CreateDataSource() (*WlDataSource, error) {
	wlDataSource := NewWlDataSource(i.Context())
	err := i.Context().SendRequest(i, 0, wlDataSource)
	return wlDataSource, err
}

// GetDataDevice : create a new data device
//
// Create a new data device for a given seat.
//
// id: data device to create
// seat: seat associated with the data device
func (i *WlDataDeviceManager) GetDataDevice(seat *WlSeat) (*WlDataDevice, error) {
	wlDataDevice := NewWlDataDevice(i.Context())
	err := i.Context().SendRequest(i, 1, wlDataDevice, seat)
	return wlDataDevice, err
}

// WlDataDeviceManagerDndAction : drag and drop actions
//
// This is a bitmask of the available/preferred actions in a
// drag-and-drop operation.
//
// In the compositor, the selected action is a result of matching the
// actions offered by the source and destination sides.  "action" events
// with a "none" action will be sent to both source and destination if
// there is no match. All further checks will effectively happen on
// (source actions ∩ destination actions).
//
// In addition, compositors may also pick different actions in
// reaction to key modifiers being pressed. One common design that
// is used in major toolkits (and the behavior recommended for
// compositors) is:
//
// - If no modifiers are pressed, the first match (in bit order)
// will be used.
// - Pressing Shift selects "move", if enabled in the mask.
// - Pressing Control selects "copy", if enabled in the mask.
//
// Behavior beyond that is considered implementation-dependent.
// Compositors may for example bind other modifiers (like Alt/Meta)
// or drags initiated with other buttons than BTN_LEFT to specific
// actions (e.g. "ask").
const (
	// WlDataDeviceManagerDndActionNone : no action
	WlDataDeviceManagerDndActionNone = 0
	// WlDataDeviceManagerDndActionCopy : copy action
	WlDataDeviceManagerDndActionCopy = 1
	// WlDataDeviceManagerDndActionMove : move action
	WlDataDeviceManagerDndActionMove = 2
	// WlDataDeviceManagerDndActionAsk : ask action
	WlDataDeviceManagerDndActionAsk = 4
)

// WlShell : create desktop-style surfaces
//
// This interface is implemented by servers that provide
// desktop-style user interfaces.
//
// It allows clients to associate a wl_shell_surface with
// a basic surface.
//
// Note! This protocol is deprecated and not intended for production use.
// For desktop-style user interfaces, use xdg_shell.
type WlShell struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlShell : create desktop-style surfaces
//
// This interface is implemented by servers that provide
// desktop-style user interfaces.
//
// It allows clients to associate a wl_shell_surface with
// a basic surface.
//
// Note! This protocol is deprecated and not intended for production use.
// For desktop-style user interfaces, use xdg_shell.
func NewWlShell(ctx *Context) *WlShell {
	wlShell := &WlShell{}
	ctx.Register(wlShell)
	return wlShell
}

// GetShellSurface : create a shell surface from a surface
//
// Create a shell surface for an existing surface. This gives
// the wl_surface the role of a shell surface. If the wl_surface
// already has another role, it raises a protocol error.
//
// Only one shell surface can be associated with a given surface.
//
// id: shell surface to create
// surface: surface to be given the shell surface role
func (i *WlShell) GetShellSurface(surface *WlSurface) (*WlShellSurface, error) {
	wlShellSurface := NewWlShellSurface(i.Context())
	err := i.Context().SendRequest(i, 0, wlShellSurface, surface)
	return wlShellSurface, err
}

// WlShellError :
const (
	// WlShellErrorRole : given wl_surface has another role
	WlShellErrorRole = 0
)

// WlShellSurface : desktop-style metadata interface
//
// An interface that may be implemented by a wl_surface, for
// implementations that provide a desktop-style user interface.
//
// It provides requests to treat surfaces like toplevel, fullscreen
// or popup windows, move, resize or maximize them, associate
// metadata like title and class, etc.
//
// On the server side the object is automatically destroyed when
// the related wl_surface is destroyed. On the client side,
// wl_shell_surface_destroy() must be called before destroying
// the wl_surface object.
type WlShellSurface struct {
	BaseProxy
	mu                sync.RWMutex
	pingHandlers      []WlShellSurfacePingHandler
	configureHandlers []WlShellSurfaceConfigureHandler
	popupDoneHandlers []WlShellSurfacePopupDoneHandler
}

// NewWlShellSurface : desktop-style metadata interface
//
// An interface that may be implemented by a wl_surface, for
// implementations that provide a desktop-style user interface.
//
// It provides requests to treat surfaces like toplevel, fullscreen
// or popup windows, move, resize or maximize them, associate
// metadata like title and class, etc.
//
// On the server side the object is automatically destroyed when
// the related wl_surface is destroyed. On the client side,
// wl_shell_surface_destroy() must be called before destroying
// the wl_surface object.
func NewWlShellSurface(ctx *Context) *WlShellSurface {
	wlShellSurface := &WlShellSurface{}
	ctx.Register(wlShellSurface)
	return wlShellSurface
}

// Pong : respond to a ping event
//
// A client must respond to a ping event with a pong request or
// the client may be deemed unresponsive.
//
// serial: serial number of the ping event
func (i *WlShellSurface) Pong(serial uint32) error {
	err := i.Context().SendRequest(i, 0, serial)
	return err
}

// Move : start an interactive move
//
// Start a pointer-driven move of the surface.
//
// This request must be used in response to a button press event.
// The server may ignore move requests depending on the state of
// the surface (e.g. fullscreen or maximized).
//
// seat: seat whose pointer is used
// serial: serial number of the implicit grab on the pointer
func (i *WlShellSurface) Move(seat *WlSeat, serial uint32) error {
	err := i.Context().SendRequest(i, 1, seat, serial)
	return err
}

// Resize : start an interactive resize
//
// Start a pointer-driven resizing of the surface.
//
// This request must be used in response to a button press event.
// The server may ignore resize requests depending on the state of
// the surface (e.g. fullscreen or maximized).
//
// seat: seat whose pointer is used
// serial: serial number of the implicit grab on the pointer
// edges: which edge or corner is being dragged
func (i *WlShellSurface) Resize(seat *WlSeat, serial, edges uint32) error {
	err := i.Context().SendRequest(i, 2, seat, serial, edges)
	return err
}

// SetToplevel : make the surface a toplevel surface
//
// Map the surface as a toplevel surface.
//
// A toplevel surface is not fullscreen, maximized or transient.
//
func (i *WlShellSurface) SetToplevel() error {
	err := i.Context().SendRequest(i, 3)
	return err
}

// SetTransient : make the surface a transient surface
//
// Map the surface relative to an existing surface.
//
// The x and y arguments specify the location of the upper left
// corner of the surface relative to the upper left corner of the
// parent surface, in surface-local coordinates.
//
// The flags argument controls details of the transient behaviour.
//
// parent: parent surface
// x: surface-local x coordinate
// y: surface-local y coordinate
// flags: transient surface behavior
func (i *WlShellSurface) SetTransient(parent *WlSurface, x, y int32, flags uint32) error {
	err := i.Context().SendRequest(i, 4, parent, x, y, flags)
	return err
}

// SetFullscreen : make the surface a fullscreen surface
//
// Map the surface as a fullscreen surface.
//
// If an output parameter is given then the surface will be made
// fullscreen on that output. If the client does not specify the
// output then the compositor will apply its policy - usually
// choosing the output on which the surface has the biggest surface
// area.
//
// The client may specify a method to resolve a size conflict
// between the output size and the surface size - this is provided
// through the method parameter.
//
// The framerate parameter is used only when the method is set
// to "driver", to indicate the preferred framerate. A value of 0
// indicates that the client does not care about framerate.  The
// framerate is specified in mHz, that is framerate of 60000 is 60Hz.
//
// A method of "scale" or "driver" implies a scaling operation of
// the surface, either via a direct scaling operation or a change of
// the output mode. This will override any kind of output scaling, so
// that mapping a surface with a buffer size equal to the mode can
// fill the screen independent of buffer_scale.
//
// A method of "fill" means we don't scale up the buffer, however
// any output scale is applied. This means that you may run into
// an edge case where the application maps a buffer with the same
// size of the output mode but buffer_scale 1 (thus making a
// surface larger than the output). In this case it is allowed to
// downscale the results to fit the screen.
//
// The compositor must reply to this request with a configure event
// with the dimensions for the output on which the surface will
// be made fullscreen.
//
// method: method for resolving size conflict
// framerate: framerate in mHz
// output: output on which the surface is to be fullscreen
func (i *WlShellSurface) SetFullscreen(method, framerate uint32, output *WlOutput) error {
	err := i.Context().SendRequest(i, 5, method, framerate, output)
	return err
}

// SetPopup : make the surface a popup surface
//
// Map the surface as a popup.
//
// A popup surface is a transient surface with an added pointer
// grab.
//
// An existing implicit grab will be changed to owner-events mode,
// and the popup grab will continue after the implicit grab ends
// (i.e. releasing the mouse button does not cause the popup to
// be unmapped).
//
// The popup grab continues until the window is destroyed or a
// mouse button is pressed in any other client's window. A click
// in any of the client's surfaces is reported as normal, however,
// clicks in other clients' surfaces will be discarded and trigger
// the callback.
//
// The x and y arguments specify the location of the upper left
// corner of the surface relative to the upper left corner of the
// parent surface, in surface-local coordinates.
//
// seat: seat whose pointer is used
// serial: serial number of the implicit grab on the pointer
// parent: parent surface
// x: surface-local x coordinate
// y: surface-local y coordinate
// flags: transient surface behavior
func (i *WlShellSurface) SetPopup(seat *WlSeat, serial uint32, parent *WlSurface, x, y int32, flags uint32) error {
	err := i.Context().SendRequest(i, 6, seat, serial, parent, x, y, flags)
	return err
}

// SetMaximized : make the surface a maximized surface
//
// Map the surface as a maximized surface.
//
// If an output parameter is given then the surface will be
// maximized on that output. If the client does not specify the
// output then the compositor will apply its policy - usually
// choosing the output on which the surface has the biggest surface
// area.
//
// The compositor will reply with a configure event telling
// the expected new surface size. The operation is completed
// on the next buffer attach to this surface.
//
// A maximized surface typically fills the entire output it is
// bound to, except for desktop elements such as panels. This is
// the main difference between a maximized shell surface and a
// fullscreen shell surface.
//
// The details depend on the compositor implementation.
//
// output: output on which the surface is to be maximized
func (i *WlShellSurface) SetMaximized(output *WlOutput) error {
	err := i.Context().SendRequest(i, 7, output)
	return err
}

// SetTitle : set surface title
//
// Set a short title for the surface.
//
// This string may be used to identify the surface in a task bar,
// window list, or other user interface elements provided by the
// compositor.
//
// The string must be encoded in UTF-8.
//
// title: surface title
func (i *WlShellSurface) SetTitle(title string) error {
	err := i.Context().SendRequest(i, 8, title)
	return err
}

// SetClass : set surface class
//
// Set a class for the surface.
//
// The surface class identifies the general class of applications
// to which the surface belongs. A common convention is to use the
// file name (or the full path if it is a non-standard location) of
// the application's .desktop file as the class.
//
// class: surface class
func (i *WlShellSurface) SetClass(class string) error {
	err := i.Context().SendRequest(i, 9, class)
	return err
}

// WlShellSurfaceResize : edge values for resizing
//
// These values are used to indicate which edge of a surface
// is being dragged in a resize operation. The server may
// use this information to adapt its behavior, e.g. choose
// an appropriate cursor image.
const (
	// WlShellSurfaceResizeNone : no edge
	WlShellSurfaceResizeNone = 0
	// WlShellSurfaceResizeTop : top edge
	WlShellSurfaceResizeTop = 1
	// WlShellSurfaceResizeBottom : bottom edge
	WlShellSurfaceResizeBottom = 2
	// WlShellSurfaceResizeLeft : left edge
	WlShellSurfaceResizeLeft = 4
	// WlShellSurfaceResizeTopLeft : top and left edges
	WlShellSurfaceResizeTopLeft = 5
	// WlShellSurfaceResizeBottomLeft : bottom and left edges
	WlShellSurfaceResizeBottomLeft = 6
	// WlShellSurfaceResizeRight : right edge
	WlShellSurfaceResizeRight = 8
	// WlShellSurfaceResizeTopRight : top and right edges
	WlShellSurfaceResizeTopRight = 9
	// WlShellSurfaceResizeBottomRight : bottom and right edges
	WlShellSurfaceResizeBottomRight = 10
)

// WlShellSurfaceTransient : details of transient behaviour
//
// These flags specify details of the expected behaviour
// of transient surfaces. Used in the set_transient request.
const (
	// WlShellSurfaceTransientInactive : do not set keyboard focus
	WlShellSurfaceTransientInactive = 0x1
)

// WlShellSurfaceFullscreenMethod : different method to set the surface fullscreen
//
// Hints to indicate to the compositor how to deal with a conflict
// between the dimensions of the surface and the dimensions of the
// output. The compositor is free to ignore this parameter.
const (
	// WlShellSurfaceFullscreenMethodDefault : no preference, apply default policy
	WlShellSurfaceFullscreenMethodDefault = 0
	// WlShellSurfaceFullscreenMethodScale : scale, preserve the surface's aspect ratio and center on output
	WlShellSurfaceFullscreenMethodScale = 1
	// WlShellSurfaceFullscreenMethodDriver : switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch
	WlShellSurfaceFullscreenMethodDriver = 2
	// WlShellSurfaceFullscreenMethodFill : no upscaling, center on output and add black borders to compensate size mismatch
	WlShellSurfaceFullscreenMethodFill = 3
)

// WlShellSurfacePingEvent : ping client
//
// Ping a client to check if it is receiving events and sending
// requests. A client is expected to reply with a pong request.
type WlShellSurfacePingEvent struct {
	Serial uint32
}

type WlShellSurfacePingHandler interface {
	HandleWlShellSurfacePing(WlShellSurfacePingEvent)
}

// AddPingHandler : ping client
//
// Ping a client to check if it is receiving events and sending
// requests. A client is expected to reply with a pong request.
func (i *WlShellSurface) AddPingHandler(h WlShellSurfacePingHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.pingHandlers = append(i.pingHandlers, h)
	i.mu.Unlock()
}

func (i *WlShellSurface) RemovePingHandler(h WlShellSurfacePingHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.pingHandlers {
		if e == h {
			i.pingHandlers = append(i.pingHandlers[:j], i.pingHandlers[j+1:]...)
			break
		}
	}
}

// WlShellSurfaceConfigureEvent : suggest resize
//
// The configure event asks the client to resize its surface.
//
// The size is a hint, in the sense that the client is free to
// ignore it if it doesn't resize, pick a smaller size (to
// satisfy aspect ratio or resize in steps of NxM pixels).
//
// The edges parameter provides a hint about how the surface
// was resized. The client may use this information to decide
// how to adjust its content to the new size (e.g. a scrolling
// area might adjust its content position to leave the viewable
// content unmoved).
//
// The client is free to dismiss all but the last configure
// event it received.
//
// The width and height arguments specify the size of the window
// in surface-local coordinates.
type WlShellSurfaceConfigureEvent struct {
	Edges  uint32
	Width  int32
	Height int32
}

type WlShellSurfaceConfigureHandler interface {
	HandleWlShellSurfaceConfigure(WlShellSurfaceConfigureEvent)
}

// AddConfigureHandler : suggest resize
//
// The configure event asks the client to resize its surface.
//
// The size is a hint, in the sense that the client is free to
// ignore it if it doesn't resize, pick a smaller size (to
// satisfy aspect ratio or resize in steps of NxM pixels).
//
// The edges parameter provides a hint about how the surface
// was resized. The client may use this information to decide
// how to adjust its content to the new size (e.g. a scrolling
// area might adjust its content position to leave the viewable
// content unmoved).
//
// The client is free to dismiss all but the last configure
// event it received.
//
// The width and height arguments specify the size of the window
// in surface-local coordinates.
func (i *WlShellSurface) AddConfigureHandler(h WlShellSurfaceConfigureHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.configureHandlers = append(i.configureHandlers, h)
	i.mu.Unlock()
}

func (i *WlShellSurface) RemoveConfigureHandler(h WlShellSurfaceConfigureHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.configureHandlers {
		if e == h {
			i.configureHandlers = append(i.configureHandlers[:j], i.configureHandlers[j+1:]...)
			break
		}
	}
}

// WlShellSurfacePopupDoneEvent : popup interaction is done
//
// The popup_done event is sent out when a popup grab is broken,
// that is, when the user clicks a surface that doesn't belong
// to the client owning the popup surface.
type WlShellSurfacePopupDoneEvent struct{}
type WlShellSurfacePopupDoneHandler interface {
	HandleWlShellSurfacePopupDone(WlShellSurfacePopupDoneEvent)
}

// AddPopupDoneHandler : popup interaction is done
//
// The popup_done event is sent out when a popup grab is broken,
// that is, when the user clicks a surface that doesn't belong
// to the client owning the popup surface.
func (i *WlShellSurface) AddPopupDoneHandler(h WlShellSurfacePopupDoneHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.popupDoneHandlers = append(i.popupDoneHandlers, h)
	i.mu.Unlock()
}

func (i *WlShellSurface) RemovePopupDoneHandler(h WlShellSurfacePopupDoneHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.popupDoneHandlers {
		if e == h {
			i.popupDoneHandlers = append(i.popupDoneHandlers[:j], i.popupDoneHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlShellSurface) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.pingHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlShellSurfacePingEvent{
			Serial: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.pingHandlers {
			i.mu.RUnlock()

			h.HandleWlShellSurfacePing(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.configureHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlShellSurfaceConfigureEvent{
			Edges:  event.Uint32(),
			Width:  event.Int32(),
			Height: event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.configureHandlers {
			i.mu.RUnlock()

			h.HandleWlShellSurfaceConfigure(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.popupDoneHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlShellSurfacePopupDoneEvent{}

		i.mu.RLock()
		for _, h := range i.popupDoneHandlers {
			i.mu.RUnlock()

			h.HandleWlShellSurfacePopupDone(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlSurface : an onscreen surface
//
// A surface is a rectangular area that may be displayed on zero
// or more outputs, and shown any number of times at the compositor's
// discretion. They can present wl_buffers, receive user input, and
// define a local coordinate system.
//
// The size of a surface (and relative positions on it) is described
// in surface-local coordinates, which may differ from the buffer
// coordinates of the pixel content, in case a buffer_transform
// or a buffer_scale is used.
//
// A surface without a "role" is fairly useless: a compositor does
// not know where, when or how to present it. The role is the
// purpose of a wl_surface. Examples of roles are a cursor for a
// pointer (as set by wl_pointer.set_cursor), a drag icon
// (wl_data_device.start_drag), a sub-surface
// (wl_subcompositor.get_subsurface), and a window as defined by a
// shell protocol (e.g. wl_shell.get_shell_surface).
//
// A surface can have only one role at a time. Initially a
// wl_surface does not have a role. Once a wl_surface is given a
// role, it is set permanently for the whole lifetime of the
// wl_surface object. Giving the current role again is allowed,
// unless explicitly forbidden by the relevant interface
// specification.
//
// Surface roles are given by requests in other interfaces such as
// wl_pointer.set_cursor. The request should explicitly mention
// that this request gives a role to a wl_surface. Often, this
// request also creates a new protocol object that represents the
// role and adds additional functionality to wl_surface. When a
// client wants to destroy a wl_surface, they must destroy this 'role
// object' before the wl_surface.
//
// Destroying the role object does not remove the role from the
// wl_surface, but it may stop the wl_surface from "playing the role".
// For instance, if a wl_subsurface object is destroyed, the wl_surface
// it was created for will be unmapped and forget its position and
// z-order. It is allowed to create a wl_subsurface for the same
// wl_surface again, but it is not allowed to use the wl_surface as
// a cursor (cursor is a different role than sub-surface, and role
// switching is not allowed).
type WlSurface struct {
	BaseProxy
	mu            sync.RWMutex
	enterHandlers []WlSurfaceEnterHandler
	leaveHandlers []WlSurfaceLeaveHandler
}

// NewWlSurface : an onscreen surface
//
// A surface is a rectangular area that may be displayed on zero
// or more outputs, and shown any number of times at the compositor's
// discretion. They can present wl_buffers, receive user input, and
// define a local coordinate system.
//
// The size of a surface (and relative positions on it) is described
// in surface-local coordinates, which may differ from the buffer
// coordinates of the pixel content, in case a buffer_transform
// or a buffer_scale is used.
//
// A surface without a "role" is fairly useless: a compositor does
// not know where, when or how to present it. The role is the
// purpose of a wl_surface. Examples of roles are a cursor for a
// pointer (as set by wl_pointer.set_cursor), a drag icon
// (wl_data_device.start_drag), a sub-surface
// (wl_subcompositor.get_subsurface), and a window as defined by a
// shell protocol (e.g. wl_shell.get_shell_surface).
//
// A surface can have only one role at a time. Initially a
// wl_surface does not have a role. Once a wl_surface is given a
// role, it is set permanently for the whole lifetime of the
// wl_surface object. Giving the current role again is allowed,
// unless explicitly forbidden by the relevant interface
// specification.
//
// Surface roles are given by requests in other interfaces such as
// wl_pointer.set_cursor. The request should explicitly mention
// that this request gives a role to a wl_surface. Often, this
// request also creates a new protocol object that represents the
// role and adds additional functionality to wl_surface. When a
// client wants to destroy a wl_surface, they must destroy this 'role
// object' before the wl_surface.
//
// Destroying the role object does not remove the role from the
// wl_surface, but it may stop the wl_surface from "playing the role".
// For instance, if a wl_subsurface object is destroyed, the wl_surface
// it was created for will be unmapped and forget its position and
// z-order. It is allowed to create a wl_subsurface for the same
// wl_surface again, but it is not allowed to use the wl_surface as
// a cursor (cursor is a different role than sub-surface, and role
// switching is not allowed).
func NewWlSurface(ctx *Context) *WlSurface {
	wlSurface := &WlSurface{}
	ctx.Register(wlSurface)
	return wlSurface
}

// Destroy : delete surface
//
// Deletes the surface and invalidates its object ID.
//
func (i *WlSurface) Destroy() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// Attach : set the surface contents
//
// Set a buffer as the content of this surface.
//
// The new size of the surface is calculated based on the buffer
// size transformed by the inverse buffer_transform and the
// inverse buffer_scale. This means that at commit time the supplied
// buffer size must be an integer multiple of the buffer_scale. If
// that's not the case, an invalid_size error is sent.
//
// The x and y arguments specify the location of the new pending
// buffer's upper left corner, relative to the current buffer's upper
// left corner, in surface-local coordinates. In other words, the
// x and y, combined with the new surface size define in which
// directions the surface's size changes.
//
// Surface contents are double-buffered state, see wl_surface.commit.
//
// The initial surface contents are void; there is no content.
// wl_surface.attach assigns the given wl_buffer as the pending
// wl_buffer. wl_surface.commit makes the pending wl_buffer the new
// surface contents, and the size of the surface becomes the size
// calculated from the wl_buffer, as described above. After commit,
// there is no pending buffer until the next attach.
//
// Committing a pending wl_buffer allows the compositor to read the
// pixels in the wl_buffer. The compositor may access the pixels at
// any time after the wl_surface.commit request. When the compositor
// will not access the pixels anymore, it will send the
// wl_buffer.release event. Only after receiving wl_buffer.release,
// the client may reuse the wl_buffer. A wl_buffer that has been
// attached and then replaced by another attach instead of committed
// will not receive a release event, and is not used by the
// compositor.
//
// If a pending wl_buffer has been committed to more than one wl_surface,
// the delivery of wl_buffer.release events becomes undefined. A well
// behaved client should not rely on wl_buffer.release events in this
// case. Alternatively, a client could create multiple wl_buffer objects
// from the same backing storage or use wp_linux_buffer_release.
//
// Destroying the wl_buffer after wl_buffer.release does not change
// the surface contents. However, if the client destroys the
// wl_buffer before receiving the wl_buffer.release event, the surface
// contents become undefined immediately.
//
// If wl_surface.attach is sent with a NULL wl_buffer, the
// following wl_surface.commit will remove the surface content.
//
// buffer: buffer of surface contents
// x: surface-local x coordinate
// y: surface-local y coordinate
func (i *WlSurface) Attach(buffer *WlBuffer, x, y int32) error {
	err := i.Context().SendRequest(i, 1, buffer, x, y)
	return err
}

// Damage : mark part of the surface damaged
//
// This request is used to describe the regions where the pending
// buffer is different from the current surface contents, and where
// the surface therefore needs to be repainted. The compositor
// ignores the parts of the damage that fall outside of the surface.
//
// Damage is double-buffered state, see wl_surface.commit.
//
// The damage rectangle is specified in surface-local coordinates,
// where x and y specify the upper left corner of the damage rectangle.
//
// The initial value for pending damage is empty: no damage.
// wl_surface.damage adds pending damage: the new pending damage
// is the union of old pending damage and the given rectangle.
//
// wl_surface.commit assigns pending damage as the current damage,
// and clears pending damage. The server will clear the current
// damage as it repaints the surface.
//
// Note! New clients should not use this request. Instead damage can be
// posted with wl_surface.damage_buffer which uses buffer coordinates
// instead of surface coordinates.
//
// x: surface-local x coordinate
// y: surface-local y coordinate
// width: width of damage rectangle
// height: height of damage rectangle
func (i *WlSurface) Damage(x, y, width, height int32) error {
	err := i.Context().SendRequest(i, 2, x, y, width, height)
	return err
}

// Frame : request a frame throttling hint
//
// Request a notification when it is a good time to start drawing a new
// frame, by creating a frame callback. This is useful for throttling
// redrawing operations, and driving animations.
//
// When a client is animating on a wl_surface, it can use the 'frame'
// request to get notified when it is a good time to draw and commit the
// next frame of animation. If the client commits an update earlier than
// that, it is likely that some updates will not make it to the display,
// and the client is wasting resources by drawing too often.
//
// The frame request will take effect on the next wl_surface.commit.
// The notification will only be posted for one frame unless
// requested again. For a wl_surface, the notifications are posted in
// the order the frame requests were committed.
//
// The server must send the notifications so that a client
// will not send excessive updates, while still allowing
// the highest possible update rate for clients that wait for the reply
// before drawing again. The server should give some time for the client
// to draw and commit after sending the frame callback events to let it
// hit the next output refresh.
//
// A server should avoid signaling the frame callbacks if the
// surface is not visible in any way, e.g. the surface is off-screen,
// or completely obscured by other opaque surfaces.
//
// The object returned by this request will be destroyed by the
// compositor after the callback is fired and as such the client must not
// attempt to use it after that point.
//
// The callback_data passed in the callback is the current time, in
// milliseconds, with an undefined base.
//
// callback: callback object for the frame request
func (i *WlSurface) Frame() (*WlCallback, error) {
	wlCallback := NewWlCallback(i.Context())
	err := i.Context().SendRequest(i, 3, wlCallback)
	return wlCallback, err
}

// SetOpaqueRegion : set opaque region
//
// This request sets the region of the surface that contains
// opaque content.
//
// The opaque region is an optimization hint for the compositor
// that lets it optimize the redrawing of content behind opaque
// regions.  Setting an opaque region is not required for correct
// behaviour, but marking transparent content as opaque will result
// in repaint artifacts.
//
// The opaque region is specified in surface-local coordinates.
//
// The compositor ignores the parts of the opaque region that fall
// outside of the surface.
//
// Opaque region is double-buffered state, see wl_surface.commit.
//
// wl_surface.set_opaque_region changes the pending opaque region.
// wl_surface.commit copies the pending region to the current region.
// Otherwise, the pending and current regions are never changed.
//
// The initial value for an opaque region is empty. Setting the pending
// opaque region has copy semantics, and the wl_region object can be
// destroyed immediately. A NULL wl_region causes the pending opaque
// region to be set to empty.
//
// region: opaque region of the surface
func (i *WlSurface) SetOpaqueRegion(region *WlRegion) error {
	err := i.Context().SendRequest(i, 4, region)
	return err
}

// SetInputRegion : set input region
//
// This request sets the region of the surface that can receive
// pointer and touch events.
//
// Input events happening outside of this region will try the next
// surface in the server surface stack. The compositor ignores the
// parts of the input region that fall outside of the surface.
//
// The input region is specified in surface-local coordinates.
//
// Input region is double-buffered state, see wl_surface.commit.
//
// wl_surface.set_input_region changes the pending input region.
// wl_surface.commit copies the pending region to the current region.
// Otherwise the pending and current regions are never changed,
// except cursor and icon surfaces are special cases, see
// wl_pointer.set_cursor and wl_data_device.start_drag.
//
// The initial value for an input region is infinite. That means the
// whole surface will accept input. Setting the pending input region
// has copy semantics, and the wl_region object can be destroyed
// immediately. A NULL wl_region causes the input region to be set
// to infinite.
//
// region: input region of the surface
func (i *WlSurface) SetInputRegion(region *WlRegion) error {
	err := i.Context().SendRequest(i, 5, region)
	return err
}

// Commit : commit pending surface state
//
// Surface state (input, opaque, and damage regions, attached buffers,
// etc.) is double-buffered. Protocol requests modify the pending state,
// as opposed to the current state in use by the compositor. A commit
// request atomically applies all pending state, replacing the current
// state. After commit, the new pending state is as documented for each
// related request.
//
// On commit, a pending wl_buffer is applied first, and all other state
// second. This means that all coordinates in double-buffered state are
// relative to the new wl_buffer coming into use, except for
// wl_surface.attach itself. If there is no pending wl_buffer, the
// coordinates are relative to the current surface contents.
//
// All requests that need a commit to become effective are documented
// to affect double-buffered state.
//
// Other interfaces may add further double-buffered surface state.
//
func (i *WlSurface) Commit() error {
	err := i.Context().SendRequest(i, 6)
	return err
}

// SetBufferTransform : sets the buffer transformation
//
// This request sets an optional transformation on how the compositor
// interprets the contents of the buffer attached to the surface. The
// accepted values for the transform parameter are the values for
// wl_output.transform.
//
// Buffer transform is double-buffered state, see wl_surface.commit.
//
// A newly created surface has its buffer transformation set to normal.
//
// wl_surface.set_buffer_transform changes the pending buffer
// transformation. wl_surface.commit copies the pending buffer
// transformation to the current one. Otherwise, the pending and current
// values are never changed.
//
// The purpose of this request is to allow clients to render content
// according to the output transform, thus permitting the compositor to
// use certain optimizations even if the display is rotated. Using
// hardware overlays and scanning out a client buffer for fullscreen
// surfaces are examples of such optimizations. Those optimizations are
// highly dependent on the compositor implementation, so the use of this
// request should be considered on a case-by-case basis.
//
// Note that if the transform value includes 90 or 270 degree rotation,
// the width of the buffer will become the surface height and the height
// of the buffer will become the surface width.
//
// If transform is not one of the values from the
// wl_output.transform enum the invalid_transform protocol error
// is raised.
//
// transform: transform for interpreting buffer contents
func (i *WlSurface) SetBufferTransform(transform int32) error {
	err := i.Context().SendRequest(i, 7, transform)
	return err
}

// SetBufferScale : sets the buffer scaling factor
//
// This request sets an optional scaling factor on how the compositor
// interprets the contents of the buffer attached to the window.
//
// Buffer scale is double-buffered state, see wl_surface.commit.
//
// A newly created surface has its buffer scale set to 1.
//
// wl_surface.set_buffer_scale changes the pending buffer scale.
// wl_surface.commit copies the pending buffer scale to the current one.
// Otherwise, the pending and current values are never changed.
//
// The purpose of this request is to allow clients to supply higher
// resolution buffer data for use on high resolution outputs. It is
// intended that you pick the same buffer scale as the scale of the
// output that the surface is displayed on. This means the compositor
// can avoid scaling when rendering the surface on that output.
//
// Note that if the scale is larger than 1, then you have to attach
// a buffer that is larger (by a factor of scale in each dimension)
// than the desired surface size.
//
// If scale is not positive the invalid_scale protocol error is
// raised.
//
// scale: positive scale for interpreting buffer contents
func (i *WlSurface) SetBufferScale(scale int32) error {
	err := i.Context().SendRequest(i, 8, scale)
	return err
}

// DamageBuffer : mark part of the surface damaged using buffer coordinates
//
// This request is used to describe the regions where the pending
// buffer is different from the current surface contents, and where
// the surface therefore needs to be repainted. The compositor
// ignores the parts of the damage that fall outside of the surface.
//
// Damage is double-buffered state, see wl_surface.commit.
//
// The damage rectangle is specified in buffer coordinates,
// where x and y specify the upper left corner of the damage rectangle.
//
// The initial value for pending damage is empty: no damage.
// wl_surface.damage_buffer adds pending damage: the new pending
// damage is the union of old pending damage and the given rectangle.
//
// wl_surface.commit assigns pending damage as the current damage,
// and clears pending damage. The server will clear the current
// damage as it repaints the surface.
//
// This request differs from wl_surface.damage in only one way - it
// takes damage in buffer coordinates instead of surface-local
// coordinates. While this generally is more intuitive than surface
// coordinates, it is especially desirable when using wp_viewport
// or when a drawing library (like EGL) is unaware of buffer scale
// and buffer transform.
//
// Note: Because buffer transformation changes and damage requests may
// be interleaved in the protocol stream, it is impossible to determine
// the actual mapping between surface and buffer damage until
// wl_surface.commit time. Therefore, compositors wishing to take both
// kinds of damage into account will have to accumulate damage from the
// two requests separately and only transform from one to the other
// after receiving the wl_surface.commit.
//
// x: buffer-local x coordinate
// y: buffer-local y coordinate
// width: width of damage rectangle
// height: height of damage rectangle
func (i *WlSurface) DamageBuffer(x, y, width, height int32) error {
	err := i.Context().SendRequest(i, 9, x, y, width, height)
	return err
}

// WlSurfaceError : wl_surface error values
//
// These errors can be emitted in response to wl_surface requests.
const (
	// WlSurfaceErrorInvalidScale : buffer scale value is invalid
	WlSurfaceErrorInvalidScale = 0
	// WlSurfaceErrorInvalidTransform : buffer transform value is invalid
	WlSurfaceErrorInvalidTransform = 1
	// WlSurfaceErrorInvalidSize : buffer size is invalid
	WlSurfaceErrorInvalidSize = 2
)

// WlSurfaceEnterEvent : surface enters an output
//
// This is emitted whenever a surface's creation, movement, or resizing
// results in some part of it being within the scanout region of an
// output.
//
// Note that a surface may be overlapping with zero or more outputs.
type WlSurfaceEnterEvent struct {
	Output *WlOutput
}

type WlSurfaceEnterHandler interface {
	HandleWlSurfaceEnter(WlSurfaceEnterEvent)
}

// AddEnterHandler : surface enters an output
//
// This is emitted whenever a surface's creation, movement, or resizing
// results in some part of it being within the scanout region of an
// output.
//
// Note that a surface may be overlapping with zero or more outputs.
func (i *WlSurface) AddEnterHandler(h WlSurfaceEnterHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.enterHandlers = append(i.enterHandlers, h)
	i.mu.Unlock()
}

func (i *WlSurface) RemoveEnterHandler(h WlSurfaceEnterHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.enterHandlers {
		if e == h {
			i.enterHandlers = append(i.enterHandlers[:j], i.enterHandlers[j+1:]...)
			break
		}
	}
}

// WlSurfaceLeaveEvent : surface leaves an output
//
// This is emitted whenever a surface's creation, movement, or resizing
// results in it no longer having any part of it within the scanout region
// of an output.
//
// Clients should not use the number of outputs the surface is on for frame
// throttling purposes. The surface might be hidden even if no leave event
// has been sent, and the compositor might expect new surface content
// updates even if no enter event has been sent. The frame event should be
// used instead.
type WlSurfaceLeaveEvent struct {
	Output *WlOutput
}

type WlSurfaceLeaveHandler interface {
	HandleWlSurfaceLeave(WlSurfaceLeaveEvent)
}

// AddLeaveHandler : surface leaves an output
//
// This is emitted whenever a surface's creation, movement, or resizing
// results in it no longer having any part of it within the scanout region
// of an output.
//
// Clients should not use the number of outputs the surface is on for frame
// throttling purposes. The surface might be hidden even if no leave event
// has been sent, and the compositor might expect new surface content
// updates even if no enter event has been sent. The frame event should be
// used instead.
func (i *WlSurface) AddLeaveHandler(h WlSurfaceLeaveHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.leaveHandlers = append(i.leaveHandlers, h)
	i.mu.Unlock()
}

func (i *WlSurface) RemoveLeaveHandler(h WlSurfaceLeaveHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.leaveHandlers {
		if e == h {
			i.leaveHandlers = append(i.leaveHandlers[:j], i.leaveHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlSurface) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.enterHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlSurfaceEnterEvent{
			Output: event.Proxy(i.Context()).(*WlOutput),
		}

		i.mu.RLock()
		for _, h := range i.enterHandlers {
			i.mu.RUnlock()

			h.HandleWlSurfaceEnter(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.leaveHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlSurfaceLeaveEvent{
			Output: event.Proxy(i.Context()).(*WlOutput),
		}

		i.mu.RLock()
		for _, h := range i.leaveHandlers {
			i.mu.RUnlock()

			h.HandleWlSurfaceLeave(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlSeat : group of input devices
//
// A seat is a group of keyboards, pointer and touch devices. This
// object is published as a global during start up, or when such a
// device is hot plugged.  A seat typically has a pointer and
// maintains a keyboard focus and a pointer focus.
type WlSeat struct {
	BaseProxy
	mu                   sync.RWMutex
	capabilitiesHandlers []WlSeatCapabilitiesHandler
	nameHandlers         []WlSeatNameHandler
}

// NewWlSeat : group of input devices
//
// A seat is a group of keyboards, pointer and touch devices. This
// object is published as a global during start up, or when such a
// device is hot plugged.  A seat typically has a pointer and
// maintains a keyboard focus and a pointer focus.
func NewWlSeat(ctx *Context) *WlSeat {
	wlSeat := &WlSeat{}
	ctx.Register(wlSeat)
	return wlSeat
}

// GetPointer : return pointer object
//
// The ID provided will be initialized to the wl_pointer interface
// for this seat.
//
// This request only takes effect if the seat has the pointer
// capability, or has had the pointer capability in the past.
// It is a protocol violation to issue this request on a seat that has
// never had the pointer capability. The missing_capability error will
// be sent in this case.
//
// id: seat pointer
func (i *WlSeat) GetPointer() (*WlPointer, error) {
	wlPointer := NewWlPointer(i.Context())
	err := i.Context().SendRequest(i, 0, wlPointer)
	return wlPointer, err
}

// GetKeyboard : return keyboard object
//
// The ID provided will be initialized to the wl_keyboard interface
// for this seat.
//
// This request only takes effect if the seat has the keyboard
// capability, or has had the keyboard capability in the past.
// It is a protocol violation to issue this request on a seat that has
// never had the keyboard capability. The missing_capability error will
// be sent in this case.
//
// id: seat keyboard
func (i *WlSeat) GetKeyboard() (*WlKeyboard, error) {
	wlKeyboard := NewWlKeyboard(i.Context())
	err := i.Context().SendRequest(i, 1, wlKeyboard)
	return wlKeyboard, err
}

// GetTouch : return touch object
//
// The ID provided will be initialized to the wl_touch interface
// for this seat.
//
// This request only takes effect if the seat has the touch
// capability, or has had the touch capability in the past.
// It is a protocol violation to issue this request on a seat that has
// never had the touch capability. The missing_capability error will
// be sent in this case.
//
// id: seat touch interface
func (i *WlSeat) GetTouch() (*WlTouch, error) {
	wlTouch := NewWlTouch(i.Context())
	err := i.Context().SendRequest(i, 2, wlTouch)
	return wlTouch, err
}

// Release : release the seat object
//
// Using this request a client can tell the server that it is not going to
// use the seat object anymore.
//
func (i *WlSeat) Release() error {
	err := i.Context().SendRequest(i, 3)
	return err
}

// WlSeatCapability : seat capability bitmask
//
// This is a bitmask of capabilities this seat has; if a member is
// set, then it is present on the seat.
const (
	// WlSeatCapabilityPointer : the seat has pointer devices
	WlSeatCapabilityPointer = 1
	// WlSeatCapabilityKeyboard : the seat has one or more keyboards
	WlSeatCapabilityKeyboard = 2
	// WlSeatCapabilityTouch : the seat has touch devices
	WlSeatCapabilityTouch = 4
)

// WlSeatError : wl_seat error values
//
// These errors can be emitted in response to wl_seat requests.
const (
	// WlSeatErrorMissingCapability : get_pointer, get_keyboard or get_touch called on seat without the matching capability
	WlSeatErrorMissingCapability = 0
)

// WlSeatCapabilitiesEvent : seat capabilities changed
//
// This is emitted whenever a seat gains or loses the pointer,
// keyboard or touch capabilities.  The argument is a capability
// enum containing the complete set of capabilities this seat has.
//
// When the pointer capability is added, a client may create a
// wl_pointer object using the wl_seat.get_pointer request. This object
// will receive pointer events until the capability is removed in the
// future.
//
// When the pointer capability is removed, a client should destroy the
// wl_pointer objects associated with the seat where the capability was
// removed, using the wl_pointer.release request. No further pointer
// events will be received on these objects.
//
// In some compositors, if a seat regains the pointer capability and a
// client has a previously obtained wl_pointer object of version 4 or
// less, that object may start sending pointer events again. This
// behavior is considered a misinterpretation of the intended behavior
// and must not be relied upon by the client. wl_pointer objects of
// version 5 or later must not send events if created before the most
// recent event notifying the client of an added pointer capability.
//
// The above behavior also applies to wl_keyboard and wl_touch with the
// keyboard and touch capabilities, respectively.
type WlSeatCapabilitiesEvent struct {
	Capabilities uint32
}

type WlSeatCapabilitiesHandler interface {
	HandleWlSeatCapabilities(WlSeatCapabilitiesEvent)
}

// AddCapabilitiesHandler : seat capabilities changed
//
// This is emitted whenever a seat gains or loses the pointer,
// keyboard or touch capabilities.  The argument is a capability
// enum containing the complete set of capabilities this seat has.
//
// When the pointer capability is added, a client may create a
// wl_pointer object using the wl_seat.get_pointer request. This object
// will receive pointer events until the capability is removed in the
// future.
//
// When the pointer capability is removed, a client should destroy the
// wl_pointer objects associated with the seat where the capability was
// removed, using the wl_pointer.release request. No further pointer
// events will be received on these objects.
//
// In some compositors, if a seat regains the pointer capability and a
// client has a previously obtained wl_pointer object of version 4 or
// less, that object may start sending pointer events again. This
// behavior is considered a misinterpretation of the intended behavior
// and must not be relied upon by the client. wl_pointer objects of
// version 5 or later must not send events if created before the most
// recent event notifying the client of an added pointer capability.
//
// The above behavior also applies to wl_keyboard and wl_touch with the
// keyboard and touch capabilities, respectively.
func (i *WlSeat) AddCapabilitiesHandler(h WlSeatCapabilitiesHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.capabilitiesHandlers = append(i.capabilitiesHandlers, h)
	i.mu.Unlock()
}

func (i *WlSeat) RemoveCapabilitiesHandler(h WlSeatCapabilitiesHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.capabilitiesHandlers {
		if e == h {
			i.capabilitiesHandlers = append(i.capabilitiesHandlers[:j], i.capabilitiesHandlers[j+1:]...)
			break
		}
	}
}

// WlSeatNameEvent : unique identifier for this seat
//
// In a multiseat configuration this can be used by the client to help
// identify which physical devices the seat represents. Based on
// the seat configuration used by the compositor.
type WlSeatNameEvent struct {
	Name string
}

type WlSeatNameHandler interface {
	HandleWlSeatName(WlSeatNameEvent)
}

// AddNameHandler : unique identifier for this seat
//
// In a multiseat configuration this can be used by the client to help
// identify which physical devices the seat represents. Based on
// the seat configuration used by the compositor.
func (i *WlSeat) AddNameHandler(h WlSeatNameHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.nameHandlers = append(i.nameHandlers, h)
	i.mu.Unlock()
}

func (i *WlSeat) RemoveNameHandler(h WlSeatNameHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.nameHandlers {
		if e == h {
			i.nameHandlers = append(i.nameHandlers[:j], i.nameHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlSeat) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.capabilitiesHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlSeatCapabilitiesEvent{
			Capabilities: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.capabilitiesHandlers {
			i.mu.RUnlock()

			h.HandleWlSeatCapabilities(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.nameHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlSeatNameEvent{
			Name: event.String(),
		}

		i.mu.RLock()
		for _, h := range i.nameHandlers {
			i.mu.RUnlock()

			h.HandleWlSeatName(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlPointer : pointer input device
//
// The wl_pointer interface represents one or more input devices,
// such as mice, which control the pointer location and pointer_focus
// of a seat.
//
// The wl_pointer interface generates motion, enter and leave
// events for the surfaces that the pointer is located over,
// and button and axis events for button presses, button releases
// and scrolling.
type WlPointer struct {
	BaseProxy
	mu                   sync.RWMutex
	enterHandlers        []WlPointerEnterHandler
	leaveHandlers        []WlPointerLeaveHandler
	motionHandlers       []WlPointerMotionHandler
	buttonHandlers       []WlPointerButtonHandler
	axisHandlers         []WlPointerAxisHandler
	frameHandlers        []WlPointerFrameHandler
	axisSourceHandlers   []WlPointerAxisSourceHandler
	axisStopHandlers     []WlPointerAxisStopHandler
	axisDiscreteHandlers []WlPointerAxisDiscreteHandler
}

// NewWlPointer : pointer input device
//
// The wl_pointer interface represents one or more input devices,
// such as mice, which control the pointer location and pointer_focus
// of a seat.
//
// The wl_pointer interface generates motion, enter and leave
// events for the surfaces that the pointer is located over,
// and button and axis events for button presses, button releases
// and scrolling.
func NewWlPointer(ctx *Context) *WlPointer {
	wlPointer := &WlPointer{}
	ctx.Register(wlPointer)
	return wlPointer
}

// SetCursor : set the pointer surface
//
// Set the pointer surface, i.e., the surface that contains the
// pointer image (cursor). This request gives the surface the role
// of a cursor. If the surface already has another role, it raises
// a protocol error.
//
// The cursor actually changes only if the pointer
// focus for this device is one of the requesting client's surfaces
// or the surface parameter is the current pointer surface. If
// there was a previous surface set with this request it is
// replaced. If surface is NULL, the pointer image is hidden.
//
// The parameters hotspot_x and hotspot_y define the position of
// the pointer surface relative to the pointer location. Its
// top-left corner is always at (x, y) - (hotspot_x, hotspot_y),
// where (x, y) are the coordinates of the pointer location, in
// surface-local coordinates.
//
// On surface.attach requests to the pointer surface, hotspot_x
// and hotspot_y are decremented by the x and y parameters
// passed to the request. Attach must be confirmed by
// wl_surface.commit as usual.
//
// The hotspot can also be updated by passing the currently set
// pointer surface to this request with new values for hotspot_x
// and hotspot_y.
//
// The current and pending input regions of the wl_surface are
// cleared, and wl_surface.set_input_region is ignored until the
// wl_surface is no longer used as the cursor. When the use as a
// cursor ends, the current and pending input regions become
// undefined, and the wl_surface is unmapped.
//
// serial: serial number of the enter event
// surface: pointer surface
// hotspotX: surface-local x coordinate
// hotspotY: surface-local y coordinate
func (i *WlPointer) SetCursor(serial uint32, surface *WlSurface, hotspotX, hotspotY int32) error {
	err := i.Context().SendRequest(i, 0, serial, surface, hotspotX, hotspotY)
	return err
}

// Release : release the pointer object
//
// Using this request a client can tell the server that it is not going to
// use the pointer object anymore.
//
// This request destroys the pointer proxy object, so clients must not call
// wl_pointer_destroy() after using this request.
//
func (i *WlPointer) Release() error {
	err := i.Context().SendRequest(i, 1)
	return err
}

// WlPointerError :
const (
	// WlPointerErrorRole : given wl_surface has another role
	WlPointerErrorRole = 0
)

// WlPointerButtonState : physical button state
//
// Describes the physical state of a button that produced the button
// event.
const (
	// WlPointerButtonStateReleased : the button is not pressed
	WlPointerButtonStateReleased = 0
	// WlPointerButtonStatePressed : the button is pressed
	WlPointerButtonStatePressed = 1
)

// WlPointerAxis : axis types
//
// Describes the axis types of scroll events.
const (
	// WlPointerAxisVerticalScroll : vertical axis
	WlPointerAxisVerticalScroll = 0
	// WlPointerAxisHorizontalScroll : horizontal axis
	WlPointerAxisHorizontalScroll = 1
)

// WlPointerAxisSource : axis source types
//
// Describes the source types for axis events. This indicates to the
// client how an axis event was physically generated; a client may
// adjust the user interface accordingly. For example, scroll events
// from a "finger" source may be in a smooth coordinate space with
// kinetic scrolling whereas a "wheel" source may be in discrete steps
// of a number of lines.
//
// The "continuous" axis source is a device generating events in a
// continuous coordinate space, but using something other than a
// finger. One example for this source is button-based scrolling where
// the vertical motion of a device is converted to scroll events while
// a button is held down.
//
// The "wheel tilt" axis source indicates that the actual device is a
// wheel but the scroll event is not caused by a rotation but a
// (usually sideways) tilt of the wheel.
const (
	// WlPointerAxisSourceWheel : a physical wheel rotation
	WlPointerAxisSourceWheel = 0
	// WlPointerAxisSourceFinger : finger on a touch surface
	WlPointerAxisSourceFinger = 1
	// WlPointerAxisSourceContinuous : continuous coordinate space
	WlPointerAxisSourceContinuous = 2
	// WlPointerAxisSourceWheelTilt : a physical wheel tilt
	WlPointerAxisSourceWheelTilt = 3
)

// WlPointerEnterEvent : enter event
//
// Notification that this seat's pointer is focused on a certain
// surface.
//
// When a seat's focus enters a surface, the pointer image
// is undefined and a client should respond to this event by setting
// an appropriate pointer image with the set_cursor request.
type WlPointerEnterEvent struct {
	Serial   uint32
	Surface  *WlSurface
	SurfaceX float32
	SurfaceY float32
}

type WlPointerEnterHandler interface {
	HandleWlPointerEnter(WlPointerEnterEvent)
}

// AddEnterHandler : enter event
//
// Notification that this seat's pointer is focused on a certain
// surface.
//
// When a seat's focus enters a surface, the pointer image
// is undefined and a client should respond to this event by setting
// an appropriate pointer image with the set_cursor request.
func (i *WlPointer) AddEnterHandler(h WlPointerEnterHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.enterHandlers = append(i.enterHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveEnterHandler(h WlPointerEnterHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.enterHandlers {
		if e == h {
			i.enterHandlers = append(i.enterHandlers[:j], i.enterHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerLeaveEvent : leave event
//
// Notification that this seat's pointer is no longer focused on
// a certain surface.
//
// The leave notification is sent before the enter notification
// for the new focus.
type WlPointerLeaveEvent struct {
	Serial  uint32
	Surface *WlSurface
}

type WlPointerLeaveHandler interface {
	HandleWlPointerLeave(WlPointerLeaveEvent)
}

// AddLeaveHandler : leave event
//
// Notification that this seat's pointer is no longer focused on
// a certain surface.
//
// The leave notification is sent before the enter notification
// for the new focus.
func (i *WlPointer) AddLeaveHandler(h WlPointerLeaveHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.leaveHandlers = append(i.leaveHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveLeaveHandler(h WlPointerLeaveHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.leaveHandlers {
		if e == h {
			i.leaveHandlers = append(i.leaveHandlers[:j], i.leaveHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerMotionEvent : pointer motion event
//
// Notification of pointer location change. The arguments
// surface_x and surface_y are the location relative to the
// focused surface.
type WlPointerMotionEvent struct {
	Time     uint32
	SurfaceX float32
	SurfaceY float32
}

type WlPointerMotionHandler interface {
	HandleWlPointerMotion(WlPointerMotionEvent)
}

// AddMotionHandler : pointer motion event
//
// Notification of pointer location change. The arguments
// surface_x and surface_y are the location relative to the
// focused surface.
func (i *WlPointer) AddMotionHandler(h WlPointerMotionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.motionHandlers = append(i.motionHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveMotionHandler(h WlPointerMotionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.motionHandlers {
		if e == h {
			i.motionHandlers = append(i.motionHandlers[:j], i.motionHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerButtonEvent : pointer button event
//
// Mouse button click and release notifications.
//
// The location of the click is given by the last motion or
// enter event.
// The time argument is a timestamp with millisecond
// granularity, with an undefined base.
//
// The button is a button code as defined in the Linux kernel's
// linux/input-event-codes.h header file, e.g. BTN_LEFT.
//
// Any 16-bit button code value is reserved for future additions to the
// kernel's event code list. All other button codes above 0xFFFF are
// currently undefined but may be used in future versions of this
// protocol.
type WlPointerButtonEvent struct {
	Serial uint32
	Time   uint32
	Button uint32
	State  uint32
}

type WlPointerButtonHandler interface {
	HandleWlPointerButton(WlPointerButtonEvent)
}

// AddButtonHandler : pointer button event
//
// Mouse button click and release notifications.
//
// The location of the click is given by the last motion or
// enter event.
// The time argument is a timestamp with millisecond
// granularity, with an undefined base.
//
// The button is a button code as defined in the Linux kernel's
// linux/input-event-codes.h header file, e.g. BTN_LEFT.
//
// Any 16-bit button code value is reserved for future additions to the
// kernel's event code list. All other button codes above 0xFFFF are
// currently undefined but may be used in future versions of this
// protocol.
func (i *WlPointer) AddButtonHandler(h WlPointerButtonHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.buttonHandlers = append(i.buttonHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveButtonHandler(h WlPointerButtonHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.buttonHandlers {
		if e == h {
			i.buttonHandlers = append(i.buttonHandlers[:j], i.buttonHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerAxisEvent : axis event
//
// Scroll and other axis notifications.
//
// For scroll events (vertical and horizontal scroll axes), the
// value parameter is the length of a vector along the specified
// axis in a coordinate space identical to those of motion events,
// representing a relative movement along the specified axis.
//
// For devices that support movements non-parallel to axes multiple
// axis events will be emitted.
//
// When applicable, for example for touch pads, the server can
// choose to emit scroll events where the motion vector is
// equivalent to a motion event vector.
//
// When applicable, a client can transform its content relative to the
// scroll distance.
type WlPointerAxisEvent struct {
	Time  uint32
	Axis  uint32
	Value float32
}

type WlPointerAxisHandler interface {
	HandleWlPointerAxis(WlPointerAxisEvent)
}

// AddAxisHandler : axis event
//
// Scroll and other axis notifications.
//
// For scroll events (vertical and horizontal scroll axes), the
// value parameter is the length of a vector along the specified
// axis in a coordinate space identical to those of motion events,
// representing a relative movement along the specified axis.
//
// For devices that support movements non-parallel to axes multiple
// axis events will be emitted.
//
// When applicable, for example for touch pads, the server can
// choose to emit scroll events where the motion vector is
// equivalent to a motion event vector.
//
// When applicable, a client can transform its content relative to the
// scroll distance.
func (i *WlPointer) AddAxisHandler(h WlPointerAxisHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.axisHandlers = append(i.axisHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveAxisHandler(h WlPointerAxisHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.axisHandlers {
		if e == h {
			i.axisHandlers = append(i.axisHandlers[:j], i.axisHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerFrameEvent : end of a pointer event sequence
//
// Indicates the end of a set of events that logically belong together.
// A client is expected to accumulate the data in all events within the
// frame before proceeding.
//
// All wl_pointer events before a wl_pointer.frame event belong
// logically together. For example, in a diagonal scroll motion the
// compositor will send an optional wl_pointer.axis_source event, two
// wl_pointer.axis events (horizontal and vertical) and finally a
// wl_pointer.frame event. The client may use this information to
// calculate a diagonal vector for scrolling.
//
// When multiple wl_pointer.axis events occur within the same frame,
// the motion vector is the combined motion of all events.
// When a wl_pointer.axis and a wl_pointer.axis_stop event occur within
// the same frame, this indicates that axis movement in one axis has
// stopped but continues in the other axis.
// When multiple wl_pointer.axis_stop events occur within the same
// frame, this indicates that these axes stopped in the same instance.
//
// A wl_pointer.frame event is sent for every logical event group,
// even if the group only contains a single wl_pointer event.
// Specifically, a client may get a sequence: motion, frame, button,
// frame, axis, frame, axis_stop, frame.
//
// The wl_pointer.enter and wl_pointer.leave events are logical events
// generated by the compositor and not the hardware. These events are
// also grouped by a wl_pointer.frame. When a pointer moves from one
// surface to another, a compositor should group the
// wl_pointer.leave event within the same wl_pointer.frame.
// However, a client must not rely on wl_pointer.leave and
// wl_pointer.enter being in the same wl_pointer.frame.
// Compositor-specific policies may require the wl_pointer.leave and
// wl_pointer.enter event being split across multiple wl_pointer.frame
// groups.
type WlPointerFrameEvent struct{}
type WlPointerFrameHandler interface {
	HandleWlPointerFrame(WlPointerFrameEvent)
}

// AddFrameHandler : end of a pointer event sequence
//
// Indicates the end of a set of events that logically belong together.
// A client is expected to accumulate the data in all events within the
// frame before proceeding.
//
// All wl_pointer events before a wl_pointer.frame event belong
// logically together. For example, in a diagonal scroll motion the
// compositor will send an optional wl_pointer.axis_source event, two
// wl_pointer.axis events (horizontal and vertical) and finally a
// wl_pointer.frame event. The client may use this information to
// calculate a diagonal vector for scrolling.
//
// When multiple wl_pointer.axis events occur within the same frame,
// the motion vector is the combined motion of all events.
// When a wl_pointer.axis and a wl_pointer.axis_stop event occur within
// the same frame, this indicates that axis movement in one axis has
// stopped but continues in the other axis.
// When multiple wl_pointer.axis_stop events occur within the same
// frame, this indicates that these axes stopped in the same instance.
//
// A wl_pointer.frame event is sent for every logical event group,
// even if the group only contains a single wl_pointer event.
// Specifically, a client may get a sequence: motion, frame, button,
// frame, axis, frame, axis_stop, frame.
//
// The wl_pointer.enter and wl_pointer.leave events are logical events
// generated by the compositor and not the hardware. These events are
// also grouped by a wl_pointer.frame. When a pointer moves from one
// surface to another, a compositor should group the
// wl_pointer.leave event within the same wl_pointer.frame.
// However, a client must not rely on wl_pointer.leave and
// wl_pointer.enter being in the same wl_pointer.frame.
// Compositor-specific policies may require the wl_pointer.leave and
// wl_pointer.enter event being split across multiple wl_pointer.frame
// groups.
func (i *WlPointer) AddFrameHandler(h WlPointerFrameHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.frameHandlers = append(i.frameHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveFrameHandler(h WlPointerFrameHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.frameHandlers {
		if e == h {
			i.frameHandlers = append(i.frameHandlers[:j], i.frameHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerAxisSourceEvent : axis source event
//
// Source information for scroll and other axes.
//
// This event does not occur on its own. It is sent before a
// wl_pointer.frame event and carries the source information for
// all events within that frame.
//
// The source specifies how this event was generated. If the source is
// wl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be
// sent when the user lifts the finger off the device.
//
// If the source is wl_pointer.axis_source.wheel,
// wl_pointer.axis_source.wheel_tilt or
// wl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may
// or may not be sent. Whether a compositor sends an axis_stop event
// for these sources is hardware-specific and implementation-dependent;
// clients must not rely on receiving an axis_stop event for these
// scroll sources and should treat scroll sequences from these scroll
// sources as unterminated by default.
//
// This event is optional. If the source is unknown for a particular
// axis event sequence, no event is sent.
// Only one wl_pointer.axis_source event is permitted per frame.
//
// The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
// not guaranteed.
type WlPointerAxisSourceEvent struct {
	AxisSource uint32
}

type WlPointerAxisSourceHandler interface {
	HandleWlPointerAxisSource(WlPointerAxisSourceEvent)
}

// AddAxisSourceHandler : axis source event
//
// Source information for scroll and other axes.
//
// This event does not occur on its own. It is sent before a
// wl_pointer.frame event and carries the source information for
// all events within that frame.
//
// The source specifies how this event was generated. If the source is
// wl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be
// sent when the user lifts the finger off the device.
//
// If the source is wl_pointer.axis_source.wheel,
// wl_pointer.axis_source.wheel_tilt or
// wl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may
// or may not be sent. Whether a compositor sends an axis_stop event
// for these sources is hardware-specific and implementation-dependent;
// clients must not rely on receiving an axis_stop event for these
// scroll sources and should treat scroll sequences from these scroll
// sources as unterminated by default.
//
// This event is optional. If the source is unknown for a particular
// axis event sequence, no event is sent.
// Only one wl_pointer.axis_source event is permitted per frame.
//
// The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
// not guaranteed.
func (i *WlPointer) AddAxisSourceHandler(h WlPointerAxisSourceHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.axisSourceHandlers = append(i.axisSourceHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveAxisSourceHandler(h WlPointerAxisSourceHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.axisSourceHandlers {
		if e == h {
			i.axisSourceHandlers = append(i.axisSourceHandlers[:j], i.axisSourceHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerAxisStopEvent : axis stop event
//
// Stop notification for scroll and other axes.
//
// For some wl_pointer.axis_source types, a wl_pointer.axis_stop event
// is sent to notify a client that the axis sequence has terminated.
// This enables the client to implement kinetic scrolling.
// See the wl_pointer.axis_source documentation for information on when
// this event may be generated.
//
// Any wl_pointer.axis events with the same axis_source after this
// event should be considered as the start of a new axis motion.
//
// The timestamp is to be interpreted identical to the timestamp in the
// wl_pointer.axis event. The timestamp value may be the same as a
// preceding wl_pointer.axis event.
type WlPointerAxisStopEvent struct {
	Time uint32
	Axis uint32
}

type WlPointerAxisStopHandler interface {
	HandleWlPointerAxisStop(WlPointerAxisStopEvent)
}

// AddAxisStopHandler : axis stop event
//
// Stop notification for scroll and other axes.
//
// For some wl_pointer.axis_source types, a wl_pointer.axis_stop event
// is sent to notify a client that the axis sequence has terminated.
// This enables the client to implement kinetic scrolling.
// See the wl_pointer.axis_source documentation for information on when
// this event may be generated.
//
// Any wl_pointer.axis events with the same axis_source after this
// event should be considered as the start of a new axis motion.
//
// The timestamp is to be interpreted identical to the timestamp in the
// wl_pointer.axis event. The timestamp value may be the same as a
// preceding wl_pointer.axis event.
func (i *WlPointer) AddAxisStopHandler(h WlPointerAxisStopHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.axisStopHandlers = append(i.axisStopHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveAxisStopHandler(h WlPointerAxisStopHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.axisStopHandlers {
		if e == h {
			i.axisStopHandlers = append(i.axisStopHandlers[:j], i.axisStopHandlers[j+1:]...)
			break
		}
	}
}

// WlPointerAxisDiscreteEvent : axis click event
//
// Discrete step information for scroll and other axes.
//
// This event carries the axis value of the wl_pointer.axis event in
// discrete steps (e.g. mouse wheel clicks).
//
// This event does not occur on its own, it is coupled with a
// wl_pointer.axis event that represents this axis value on a
// continuous scale. The protocol guarantees that each axis_discrete
// event is always followed by exactly one axis event with the same
// axis number within the same wl_pointer.frame. Note that the protocol
// allows for other events to occur between the axis_discrete and
// its coupled axis event, including other axis_discrete or axis
// events.
//
// This event is optional; continuous scrolling devices
// like two-finger scrolling on touchpads do not have discrete
// steps and do not generate this event.
//
// The discrete value carries the directional information. e.g. a value
// of -2 is two steps towards the negative direction of this axis.
//
// The axis number is identical to the axis number in the associated
// axis event.
//
// The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
// not guaranteed.
type WlPointerAxisDiscreteEvent struct {
	Axis     uint32
	Discrete int32
}

type WlPointerAxisDiscreteHandler interface {
	HandleWlPointerAxisDiscrete(WlPointerAxisDiscreteEvent)
}

// AddAxisDiscreteHandler : axis click event
//
// Discrete step information for scroll and other axes.
//
// This event carries the axis value of the wl_pointer.axis event in
// discrete steps (e.g. mouse wheel clicks).
//
// This event does not occur on its own, it is coupled with a
// wl_pointer.axis event that represents this axis value on a
// continuous scale. The protocol guarantees that each axis_discrete
// event is always followed by exactly one axis event with the same
// axis number within the same wl_pointer.frame. Note that the protocol
// allows for other events to occur between the axis_discrete and
// its coupled axis event, including other axis_discrete or axis
// events.
//
// This event is optional; continuous scrolling devices
// like two-finger scrolling on touchpads do not have discrete
// steps and do not generate this event.
//
// The discrete value carries the directional information. e.g. a value
// of -2 is two steps towards the negative direction of this axis.
//
// The axis number is identical to the axis number in the associated
// axis event.
//
// The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
// not guaranteed.
func (i *WlPointer) AddAxisDiscreteHandler(h WlPointerAxisDiscreteHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.axisDiscreteHandlers = append(i.axisDiscreteHandlers, h)
	i.mu.Unlock()
}

func (i *WlPointer) RemoveAxisDiscreteHandler(h WlPointerAxisDiscreteHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.axisDiscreteHandlers {
		if e == h {
			i.axisDiscreteHandlers = append(i.axisDiscreteHandlers[:j], i.axisDiscreteHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlPointer) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.enterHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerEnterEvent{
			Serial:   event.Uint32(),
			Surface:  event.Proxy(i.Context()).(*WlSurface),
			SurfaceX: event.Float32(),
			SurfaceY: event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.enterHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerEnter(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.leaveHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerLeaveEvent{
			Serial:  event.Uint32(),
			Surface: event.Proxy(i.Context()).(*WlSurface),
		}

		i.mu.RLock()
		for _, h := range i.leaveHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerLeave(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.motionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerMotionEvent{
			Time:     event.Uint32(),
			SurfaceX: event.Float32(),
			SurfaceY: event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.motionHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerMotion(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.buttonHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerButtonEvent{
			Serial: event.Uint32(),
			Time:   event.Uint32(),
			Button: event.Uint32(),
			State:  event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.buttonHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerButton(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 4:
		i.mu.RLock()
		if len(i.axisHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerAxisEvent{
			Time:  event.Uint32(),
			Axis:  event.Uint32(),
			Value: event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.axisHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerAxis(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 5:
		i.mu.RLock()
		if len(i.frameHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerFrameEvent{}

		i.mu.RLock()
		for _, h := range i.frameHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerFrame(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 6:
		i.mu.RLock()
		if len(i.axisSourceHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerAxisSourceEvent{
			AxisSource: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.axisSourceHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerAxisSource(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 7:
		i.mu.RLock()
		if len(i.axisStopHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerAxisStopEvent{
			Time: event.Uint32(),
			Axis: event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.axisStopHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerAxisStop(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 8:
		i.mu.RLock()
		if len(i.axisDiscreteHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlPointerAxisDiscreteEvent{
			Axis:     event.Uint32(),
			Discrete: event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.axisDiscreteHandlers {
			i.mu.RUnlock()

			h.HandleWlPointerAxisDiscrete(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlKeyboard : keyboard input device
//
// The wl_keyboard interface represents one or more keyboards
// associated with a seat.
type WlKeyboard struct {
	BaseProxy
	mu                 sync.RWMutex
	keymapHandlers     []WlKeyboardKeymapHandler
	enterHandlers      []WlKeyboardEnterHandler
	leaveHandlers      []WlKeyboardLeaveHandler
	keyHandlers        []WlKeyboardKeyHandler
	modifiersHandlers  []WlKeyboardModifiersHandler
	repeatInfoHandlers []WlKeyboardRepeatInfoHandler
}

// NewWlKeyboard : keyboard input device
//
// The wl_keyboard interface represents one or more keyboards
// associated with a seat.
func NewWlKeyboard(ctx *Context) *WlKeyboard {
	wlKeyboard := &WlKeyboard{}
	ctx.Register(wlKeyboard)
	return wlKeyboard
}

// Release : release the keyboard object
//
func (i *WlKeyboard) Release() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// WlKeyboardKeymapFormat : keyboard mapping format
//
// This specifies the format of the keymap provided to the
// client with the wl_keyboard.keymap event.
const (
	// WlKeyboardKeymapFormatNoKeymap : no keymap; client must understand how to interpret the raw keycode
	WlKeyboardKeymapFormatNoKeymap = 0
	// WlKeyboardKeymapFormatXkbV1 : libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode
	WlKeyboardKeymapFormatXkbV1 = 1
)

// WlKeyboardKeyState : physical key state
//
// Describes the physical state of a key that produced the key event.
const (
	// WlKeyboardKeyStateReleased : key is not pressed
	WlKeyboardKeyStateReleased = 0
	// WlKeyboardKeyStatePressed : key is pressed
	WlKeyboardKeyStatePressed = 1
)

// WlKeyboardKeymapEvent : keyboard mapping
//
// This event provides a file descriptor to the client which can be
// memory-mapped to provide a keyboard mapping description.
//
// From version 7 onwards, the fd must be mapped with MAP_PRIVATE by
// the recipient, as MAP_SHARED may fail.
type WlKeyboardKeymapEvent struct {
	Format uint32
	Fd     uintptr
	Size   uint32
}

type WlKeyboardKeymapHandler interface {
	HandleWlKeyboardKeymap(WlKeyboardKeymapEvent)
}

// AddKeymapHandler : keyboard mapping
//
// This event provides a file descriptor to the client which can be
// memory-mapped to provide a keyboard mapping description.
//
// From version 7 onwards, the fd must be mapped with MAP_PRIVATE by
// the recipient, as MAP_SHARED may fail.
func (i *WlKeyboard) AddKeymapHandler(h WlKeyboardKeymapHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.keymapHandlers = append(i.keymapHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveKeymapHandler(h WlKeyboardKeymapHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.keymapHandlers {
		if e == h {
			i.keymapHandlers = append(i.keymapHandlers[:j], i.keymapHandlers[j+1:]...)
			break
		}
	}
}

// WlKeyboardEnterEvent : enter event
//
// Notification that this seat's keyboard focus is on a certain
// surface.
//
// The compositor must send the wl_keyboard.modifiers event after this
// event.
type WlKeyboardEnterEvent struct {
	Serial  uint32
	Surface *WlSurface
	Keys    []int32
}

type WlKeyboardEnterHandler interface {
	HandleWlKeyboardEnter(WlKeyboardEnterEvent)
}

// AddEnterHandler : enter event
//
// Notification that this seat's keyboard focus is on a certain
// surface.
//
// The compositor must send the wl_keyboard.modifiers event after this
// event.
func (i *WlKeyboard) AddEnterHandler(h WlKeyboardEnterHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.enterHandlers = append(i.enterHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveEnterHandler(h WlKeyboardEnterHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.enterHandlers {
		if e == h {
			i.enterHandlers = append(i.enterHandlers[:j], i.enterHandlers[j+1:]...)
			break
		}
	}
}

// WlKeyboardLeaveEvent : leave event
//
// Notification that this seat's keyboard focus is no longer on
// a certain surface.
//
// The leave notification is sent before the enter notification
// for the new focus.
//
// After this event client must assume that all keys, including modifiers,
// are lifted and also it must stop key repeating if there's some going on.
type WlKeyboardLeaveEvent struct {
	Serial  uint32
	Surface *WlSurface
}

type WlKeyboardLeaveHandler interface {
	HandleWlKeyboardLeave(WlKeyboardLeaveEvent)
}

// AddLeaveHandler : leave event
//
// Notification that this seat's keyboard focus is no longer on
// a certain surface.
//
// The leave notification is sent before the enter notification
// for the new focus.
//
// After this event client must assume that all keys, including modifiers,
// are lifted and also it must stop key repeating if there's some going on.
func (i *WlKeyboard) AddLeaveHandler(h WlKeyboardLeaveHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.leaveHandlers = append(i.leaveHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveLeaveHandler(h WlKeyboardLeaveHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.leaveHandlers {
		if e == h {
			i.leaveHandlers = append(i.leaveHandlers[:j], i.leaveHandlers[j+1:]...)
			break
		}
	}
}

// WlKeyboardKeyEvent : key event
//
// A key was pressed or released.
// The time argument is a timestamp with millisecond
// granularity, with an undefined base.
//
// The key is a platform-specific key code that can be interpreted
// by feeding it to the keyboard mapping (see the keymap event).
//
// If this event produces a change in modifiers, then the resulting
// wl_keyboard.modifiers event must be sent after this event.
type WlKeyboardKeyEvent struct {
	Serial uint32
	Time   uint32
	Key    uint32
	State  uint32
}

type WlKeyboardKeyHandler interface {
	HandleWlKeyboardKey(WlKeyboardKeyEvent)
}

// AddKeyHandler : key event
//
// A key was pressed or released.
// The time argument is a timestamp with millisecond
// granularity, with an undefined base.
//
// The key is a platform-specific key code that can be interpreted
// by feeding it to the keyboard mapping (see the keymap event).
//
// If this event produces a change in modifiers, then the resulting
// wl_keyboard.modifiers event must be sent after this event.
func (i *WlKeyboard) AddKeyHandler(h WlKeyboardKeyHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.keyHandlers = append(i.keyHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveKeyHandler(h WlKeyboardKeyHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.keyHandlers {
		if e == h {
			i.keyHandlers = append(i.keyHandlers[:j], i.keyHandlers[j+1:]...)
			break
		}
	}
}

// WlKeyboardModifiersEvent : modifier and group state
//
// Notifies clients that the modifier and/or group state has
// changed, and it should update its local state.
type WlKeyboardModifiersEvent struct {
	Serial        uint32
	ModsDepressed uint32
	ModsLatched   uint32
	ModsLocked    uint32
	Group         uint32
}

type WlKeyboardModifiersHandler interface {
	HandleWlKeyboardModifiers(WlKeyboardModifiersEvent)
}

// AddModifiersHandler : modifier and group state
//
// Notifies clients that the modifier and/or group state has
// changed, and it should update its local state.
func (i *WlKeyboard) AddModifiersHandler(h WlKeyboardModifiersHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.modifiersHandlers = append(i.modifiersHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveModifiersHandler(h WlKeyboardModifiersHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.modifiersHandlers {
		if e == h {
			i.modifiersHandlers = append(i.modifiersHandlers[:j], i.modifiersHandlers[j+1:]...)
			break
		}
	}
}

// WlKeyboardRepeatInfoEvent : repeat rate and delay
//
// Informs the client about the keyboard's repeat rate and delay.
//
// This event is sent as soon as the wl_keyboard object has been created,
// and is guaranteed to be received by the client before any key press
// event.
//
// Negative values for either rate or delay are illegal. A rate of zero
// will disable any repeating (regardless of the value of delay).
//
// This event can be sent later on as well with a new value if necessary,
// so clients should continue listening for the event past the creation
// of wl_keyboard.
type WlKeyboardRepeatInfoEvent struct {
	Rate  int32
	Delay int32
}

type WlKeyboardRepeatInfoHandler interface {
	HandleWlKeyboardRepeatInfo(WlKeyboardRepeatInfoEvent)
}

// AddRepeatInfoHandler : repeat rate and delay
//
// Informs the client about the keyboard's repeat rate and delay.
//
// This event is sent as soon as the wl_keyboard object has been created,
// and is guaranteed to be received by the client before any key press
// event.
//
// Negative values for either rate or delay are illegal. A rate of zero
// will disable any repeating (regardless of the value of delay).
//
// This event can be sent later on as well with a new value if necessary,
// so clients should continue listening for the event past the creation
// of wl_keyboard.
func (i *WlKeyboard) AddRepeatInfoHandler(h WlKeyboardRepeatInfoHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.repeatInfoHandlers = append(i.repeatInfoHandlers, h)
	i.mu.Unlock()
}

func (i *WlKeyboard) RemoveRepeatInfoHandler(h WlKeyboardRepeatInfoHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.repeatInfoHandlers {
		if e == h {
			i.repeatInfoHandlers = append(i.repeatInfoHandlers[:j], i.repeatInfoHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlKeyboard) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.keymapHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardKeymapEvent{
			Format: event.Uint32(),
			Fd:     event.FD(),
			Size:   event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.keymapHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardKeymap(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.enterHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardEnterEvent{
			Serial:  event.Uint32(),
			Surface: event.Proxy(i.Context()).(*WlSurface),
			Keys:    event.Array(),
		}

		i.mu.RLock()
		for _, h := range i.enterHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardEnter(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.leaveHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardLeaveEvent{
			Serial:  event.Uint32(),
			Surface: event.Proxy(i.Context()).(*WlSurface),
		}

		i.mu.RLock()
		for _, h := range i.leaveHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardLeave(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.keyHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardKeyEvent{
			Serial: event.Uint32(),
			Time:   event.Uint32(),
			Key:    event.Uint32(),
			State:  event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.keyHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardKey(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 4:
		i.mu.RLock()
		if len(i.modifiersHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardModifiersEvent{
			Serial:        event.Uint32(),
			ModsDepressed: event.Uint32(),
			ModsLatched:   event.Uint32(),
			ModsLocked:    event.Uint32(),
			Group:         event.Uint32(),
		}

		i.mu.RLock()
		for _, h := range i.modifiersHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardModifiers(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 5:
		i.mu.RLock()
		if len(i.repeatInfoHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlKeyboardRepeatInfoEvent{
			Rate:  event.Int32(),
			Delay: event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.repeatInfoHandlers {
			i.mu.RUnlock()

			h.HandleWlKeyboardRepeatInfo(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlTouch : touchscreen input device
//
// The wl_touch interface represents a touchscreen
// associated with a seat.
//
// Touch interactions can consist of one or more contacts.
// For each contact, a series of events is generated, starting
// with a down event, followed by zero or more motion events,
// and ending with an up event. Events relating to the same
// contact point can be identified by the ID of the sequence.
type WlTouch struct {
	BaseProxy
	mu                  sync.RWMutex
	downHandlers        []WlTouchDownHandler
	upHandlers          []WlTouchUpHandler
	motionHandlers      []WlTouchMotionHandler
	frameHandlers       []WlTouchFrameHandler
	cancelHandlers      []WlTouchCancelHandler
	shapeHandlers       []WlTouchShapeHandler
	orientationHandlers []WlTouchOrientationHandler
}

// NewWlTouch : touchscreen input device
//
// The wl_touch interface represents a touchscreen
// associated with a seat.
//
// Touch interactions can consist of one or more contacts.
// For each contact, a series of events is generated, starting
// with a down event, followed by zero or more motion events,
// and ending with an up event. Events relating to the same
// contact point can be identified by the ID of the sequence.
func NewWlTouch(ctx *Context) *WlTouch {
	wlTouch := &WlTouch{}
	ctx.Register(wlTouch)
	return wlTouch
}

// Release : release the touch object
//
func (i *WlTouch) Release() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// WlTouchDownEvent : touch down event and beginning of a touch sequence
//
// A new touch point has appeared on the surface. This touch point is
// assigned a unique ID. Future events from this touch point reference
// this ID. The ID ceases to be valid after a touch up event and may be
// reused in the future.
type WlTouchDownEvent struct {
	Serial  uint32
	Time    uint32
	Surface *WlSurface
	ID      int32
	X       float32
	Y       float32
}

type WlTouchDownHandler interface {
	HandleWlTouchDown(WlTouchDownEvent)
}

// AddDownHandler : touch down event and beginning of a touch sequence
//
// A new touch point has appeared on the surface. This touch point is
// assigned a unique ID. Future events from this touch point reference
// this ID. The ID ceases to be valid after a touch up event and may be
// reused in the future.
func (i *WlTouch) AddDownHandler(h WlTouchDownHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.downHandlers = append(i.downHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveDownHandler(h WlTouchDownHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.downHandlers {
		if e == h {
			i.downHandlers = append(i.downHandlers[:j], i.downHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchUpEvent : end of a touch event sequence
//
// The touch point has disappeared. No further events will be sent for
// this touch point and the touch point's ID is released and may be
// reused in a future touch down event.
type WlTouchUpEvent struct {
	Serial uint32
	Time   uint32
	ID     int32
}

type WlTouchUpHandler interface {
	HandleWlTouchUp(WlTouchUpEvent)
}

// AddUpHandler : end of a touch event sequence
//
// The touch point has disappeared. No further events will be sent for
// this touch point and the touch point's ID is released and may be
// reused in a future touch down event.
func (i *WlTouch) AddUpHandler(h WlTouchUpHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.upHandlers = append(i.upHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveUpHandler(h WlTouchUpHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.upHandlers {
		if e == h {
			i.upHandlers = append(i.upHandlers[:j], i.upHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchMotionEvent : update of touch point coordinates
//
// A touch point has changed coordinates.
type WlTouchMotionEvent struct {
	Time uint32
	ID   int32
	X    float32
	Y    float32
}

type WlTouchMotionHandler interface {
	HandleWlTouchMotion(WlTouchMotionEvent)
}

// AddMotionHandler : update of touch point coordinates
//
// A touch point has changed coordinates.
func (i *WlTouch) AddMotionHandler(h WlTouchMotionHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.motionHandlers = append(i.motionHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveMotionHandler(h WlTouchMotionHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.motionHandlers {
		if e == h {
			i.motionHandlers = append(i.motionHandlers[:j], i.motionHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchFrameEvent : end of touch frame event
//
// Indicates the end of a set of events that logically belong together.
// A client is expected to accumulate the data in all events within the
// frame before proceeding.
//
// A wl_touch.frame terminates at least one event but otherwise no
// guarantee is provided about the set of events within a frame. A client
// must assume that any state not updated in a frame is unchanged from the
// previously known state.
type WlTouchFrameEvent struct{}
type WlTouchFrameHandler interface {
	HandleWlTouchFrame(WlTouchFrameEvent)
}

// AddFrameHandler : end of touch frame event
//
// Indicates the end of a set of events that logically belong together.
// A client is expected to accumulate the data in all events within the
// frame before proceeding.
//
// A wl_touch.frame terminates at least one event but otherwise no
// guarantee is provided about the set of events within a frame. A client
// must assume that any state not updated in a frame is unchanged from the
// previously known state.
func (i *WlTouch) AddFrameHandler(h WlTouchFrameHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.frameHandlers = append(i.frameHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveFrameHandler(h WlTouchFrameHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.frameHandlers {
		if e == h {
			i.frameHandlers = append(i.frameHandlers[:j], i.frameHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchCancelEvent : touch session cancelled
//
// Sent if the compositor decides the touch stream is a global
// gesture. No further events are sent to the clients from that
// particular gesture. Touch cancellation applies to all touch points
// currently active on this client's surface. The client is
// responsible for finalizing the touch points, future touch points on
// this surface may reuse the touch point ID.
type WlTouchCancelEvent struct{}
type WlTouchCancelHandler interface {
	HandleWlTouchCancel(WlTouchCancelEvent)
}

// AddCancelHandler : touch session cancelled
//
// Sent if the compositor decides the touch stream is a global
// gesture. No further events are sent to the clients from that
// particular gesture. Touch cancellation applies to all touch points
// currently active on this client's surface. The client is
// responsible for finalizing the touch points, future touch points on
// this surface may reuse the touch point ID.
func (i *WlTouch) AddCancelHandler(h WlTouchCancelHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.cancelHandlers = append(i.cancelHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveCancelHandler(h WlTouchCancelHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.cancelHandlers {
		if e == h {
			i.cancelHandlers = append(i.cancelHandlers[:j], i.cancelHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchShapeEvent : update shape of touch point
//
// Sent when a touchpoint has changed its shape.
//
// This event does not occur on its own. It is sent before a
// wl_touch.frame event and carries the new shape information for
// any previously reported, or new touch points of that frame.
//
// Other events describing the touch point such as wl_touch.down,
// wl_touch.motion or wl_touch.orientation may be sent within the
// same wl_touch.frame. A client should treat these events as a single
// logical touch point update. The order of wl_touch.shape,
// wl_touch.orientation and wl_touch.motion is not guaranteed.
// A wl_touch.down event is guaranteed to occur before the first
// wl_touch.shape event for this touch ID but both events may occur within
// the same wl_touch.frame.
//
// A touchpoint shape is approximated by an ellipse through the major and
// minor axis length. The major axis length describes the longer diameter
// of the ellipse, while the minor axis length describes the shorter
// diameter. Major and minor are orthogonal and both are specified in
// surface-local coordinates. The center of the ellipse is always at the
// touchpoint location as reported by wl_touch.down or wl_touch.move.
//
// This event is only sent by the compositor if the touch device supports
// shape reports. The client has to make reasonable assumptions about the
// shape if it did not receive this event.
type WlTouchShapeEvent struct {
	ID    int32
	Major float32
	Minor float32
}

type WlTouchShapeHandler interface {
	HandleWlTouchShape(WlTouchShapeEvent)
}

// AddShapeHandler : update shape of touch point
//
// Sent when a touchpoint has changed its shape.
//
// This event does not occur on its own. It is sent before a
// wl_touch.frame event and carries the new shape information for
// any previously reported, or new touch points of that frame.
//
// Other events describing the touch point such as wl_touch.down,
// wl_touch.motion or wl_touch.orientation may be sent within the
// same wl_touch.frame. A client should treat these events as a single
// logical touch point update. The order of wl_touch.shape,
// wl_touch.orientation and wl_touch.motion is not guaranteed.
// A wl_touch.down event is guaranteed to occur before the first
// wl_touch.shape event for this touch ID but both events may occur within
// the same wl_touch.frame.
//
// A touchpoint shape is approximated by an ellipse through the major and
// minor axis length. The major axis length describes the longer diameter
// of the ellipse, while the minor axis length describes the shorter
// diameter. Major and minor are orthogonal and both are specified in
// surface-local coordinates. The center of the ellipse is always at the
// touchpoint location as reported by wl_touch.down or wl_touch.move.
//
// This event is only sent by the compositor if the touch device supports
// shape reports. The client has to make reasonable assumptions about the
// shape if it did not receive this event.
func (i *WlTouch) AddShapeHandler(h WlTouchShapeHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.shapeHandlers = append(i.shapeHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveShapeHandler(h WlTouchShapeHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.shapeHandlers {
		if e == h {
			i.shapeHandlers = append(i.shapeHandlers[:j], i.shapeHandlers[j+1:]...)
			break
		}
	}
}

// WlTouchOrientationEvent : update orientation of touch point
//
// Sent when a touchpoint has changed its orientation.
//
// This event does not occur on its own. It is sent before a
// wl_touch.frame event and carries the new shape information for
// any previously reported, or new touch points of that frame.
//
// Other events describing the touch point such as wl_touch.down,
// wl_touch.motion or wl_touch.shape may be sent within the
// same wl_touch.frame. A client should treat these events as a single
// logical touch point update. The order of wl_touch.shape,
// wl_touch.orientation and wl_touch.motion is not guaranteed.
// A wl_touch.down event is guaranteed to occur before the first
// wl_touch.orientation event for this touch ID but both events may occur
// within the same wl_touch.frame.
//
// The orientation describes the clockwise angle of a touchpoint's major
// axis to the positive surface y-axis and is normalized to the -180 to
// +180 degree range. The granularity of orientation depends on the touch
// device, some devices only support binary rotation values between 0 and
// 90 degrees.
//
// This event is only sent by the compositor if the touch device supports
// orientation reports.
type WlTouchOrientationEvent struct {
	ID          int32
	Orientation float32
}

type WlTouchOrientationHandler interface {
	HandleWlTouchOrientation(WlTouchOrientationEvent)
}

// AddOrientationHandler : update orientation of touch point
//
// Sent when a touchpoint has changed its orientation.
//
// This event does not occur on its own. It is sent before a
// wl_touch.frame event and carries the new shape information for
// any previously reported, or new touch points of that frame.
//
// Other events describing the touch point such as wl_touch.down,
// wl_touch.motion or wl_touch.shape may be sent within the
// same wl_touch.frame. A client should treat these events as a single
// logical touch point update. The order of wl_touch.shape,
// wl_touch.orientation and wl_touch.motion is not guaranteed.
// A wl_touch.down event is guaranteed to occur before the first
// wl_touch.orientation event for this touch ID but both events may occur
// within the same wl_touch.frame.
//
// The orientation describes the clockwise angle of a touchpoint's major
// axis to the positive surface y-axis and is normalized to the -180 to
// +180 degree range. The granularity of orientation depends on the touch
// device, some devices only support binary rotation values between 0 and
// 90 degrees.
//
// This event is only sent by the compositor if the touch device supports
// orientation reports.
func (i *WlTouch) AddOrientationHandler(h WlTouchOrientationHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.orientationHandlers = append(i.orientationHandlers, h)
	i.mu.Unlock()
}

func (i *WlTouch) RemoveOrientationHandler(h WlTouchOrientationHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.orientationHandlers {
		if e == h {
			i.orientationHandlers = append(i.orientationHandlers[:j], i.orientationHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlTouch) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.downHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchDownEvent{
			Serial:  event.Uint32(),
			Time:    event.Uint32(),
			Surface: event.Proxy(i.Context()).(*WlSurface),
			ID:      event.Int32(),
			X:       event.Float32(),
			Y:       event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.downHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchDown(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.upHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchUpEvent{
			Serial: event.Uint32(),
			Time:   event.Uint32(),
			ID:     event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.upHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchUp(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.motionHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchMotionEvent{
			Time: event.Uint32(),
			ID:   event.Int32(),
			X:    event.Float32(),
			Y:    event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.motionHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchMotion(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.frameHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchFrameEvent{}

		i.mu.RLock()
		for _, h := range i.frameHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchFrame(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 4:
		i.mu.RLock()
		if len(i.cancelHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchCancelEvent{}

		i.mu.RLock()
		for _, h := range i.cancelHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchCancel(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 5:
		i.mu.RLock()
		if len(i.shapeHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchShapeEvent{
			ID:    event.Int32(),
			Major: event.Float32(),
			Minor: event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.shapeHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchShape(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 6:
		i.mu.RLock()
		if len(i.orientationHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlTouchOrientationEvent{
			ID:          event.Int32(),
			Orientation: event.Float32(),
		}

		i.mu.RLock()
		for _, h := range i.orientationHandlers {
			i.mu.RUnlock()

			h.HandleWlTouchOrientation(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlOutput : compositor output region
//
// An output describes part of the compositor geometry.  The
// compositor works in the 'compositor coordinate system' and an
// output corresponds to a rectangular area in that space that is
// actually visible.  This typically corresponds to a monitor that
// displays part of the compositor space.  This object is published
// as global during start up, or when a monitor is hotplugged.
type WlOutput struct {
	BaseProxy
	mu               sync.RWMutex
	geometryHandlers []WlOutputGeometryHandler
	modeHandlers     []WlOutputModeHandler
	doneHandlers     []WlOutputDoneHandler
	scaleHandlers    []WlOutputScaleHandler
}

// NewWlOutput : compositor output region
//
// An output describes part of the compositor geometry.  The
// compositor works in the 'compositor coordinate system' and an
// output corresponds to a rectangular area in that space that is
// actually visible.  This typically corresponds to a monitor that
// displays part of the compositor space.  This object is published
// as global during start up, or when a monitor is hotplugged.
func NewWlOutput(ctx *Context) *WlOutput {
	wlOutput := &WlOutput{}
	ctx.Register(wlOutput)
	return wlOutput
}

// Release : release the output object
//
// Using this request a client can tell the server that it is not going to
// use the output object anymore.
//
func (i *WlOutput) Release() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// WlOutputSubpixel : subpixel geometry information
//
// This enumeration describes how the physical
// pixels on an output are laid out.
const (
	// WlOutputSubpixelUnknown : unknown geometry
	WlOutputSubpixelUnknown = 0
	// WlOutputSubpixelNone : no geometry
	WlOutputSubpixelNone = 1
	// WlOutputSubpixelHorizontalRgb : horizontal RGB
	WlOutputSubpixelHorizontalRgb = 2
	// WlOutputSubpixelHorizontalBgr : horizontal BGR
	WlOutputSubpixelHorizontalBgr = 3
	// WlOutputSubpixelVerticalRgb : vertical RGB
	WlOutputSubpixelVerticalRgb = 4
	// WlOutputSubpixelVerticalBgr : vertical BGR
	WlOutputSubpixelVerticalBgr = 5
)

// WlOutputTransform : transform from framebuffer to output
//
// This describes the transform that a compositor will apply to a
// surface to compensate for the rotation or mirroring of an
// output device.
//
// The flipped values correspond to an initial flip around a
// vertical axis followed by rotation.
//
// The purpose is mainly to allow clients to render accordingly and
// tell the compositor, so that for fullscreen surfaces, the
// compositor will still be able to scan out directly from client
// surfaces.
const (
	// WlOutputTransformNormal : no transform
	WlOutputTransformNormal = 0
	// WlOutputTransform90 : 90 degrees counter-clockwise
	WlOutputTransform90 = 1
	// WlOutputTransform180 : 180 degrees counter-clockwise
	WlOutputTransform180 = 2
	// WlOutputTransform270 : 270 degrees counter-clockwise
	WlOutputTransform270 = 3
	// WlOutputTransformFlipped : 180 degree flip around a vertical axis
	WlOutputTransformFlipped = 4
	// WlOutputTransformFlipped90 : flip and rotate 90 degrees counter-clockwise
	WlOutputTransformFlipped90 = 5
	// WlOutputTransformFlipped180 : flip and rotate 180 degrees counter-clockwise
	WlOutputTransformFlipped180 = 6
	// WlOutputTransformFlipped270 : flip and rotate 270 degrees counter-clockwise
	WlOutputTransformFlipped270 = 7
)

// WlOutputMode : mode information
//
// These flags describe properties of an output mode.
// They are used in the flags bitfield of the mode event.
const (
	// WlOutputModeCurrent : indicates this is the current mode
	WlOutputModeCurrent = 0x1
	// WlOutputModePreferred : indicates this is the preferred mode
	WlOutputModePreferred = 0x2
)

// WlOutputGeometryEvent : properties of the output
//
// The geometry event describes geometric properties of the output.
// The event is sent when binding to the output object and whenever
// any of the properties change.
//
// The physical size can be set to zero if it doesn't make sense for this
// output (e.g. for projectors or virtual outputs).
//
// Note: wl_output only advertises partial information about the output
// position and identification. Some compositors, for instance those not
// implementing a desktop-style output layout or those exposing virtual
// outputs, might fake this information. Instead of using x and y, clients
// should use xdg_output.logical_position. Instead of using make and model,
// clients should use xdg_output.name and xdg_output.description.
type WlOutputGeometryEvent struct {
	X              int32
	Y              int32
	PhysicalWidth  int32
	PhysicalHeight int32
	Subpixel       int32
	Make           string
	Model          string
	Transform      int32
}

type WlOutputGeometryHandler interface {
	HandleWlOutputGeometry(WlOutputGeometryEvent)
}

// AddGeometryHandler : properties of the output
//
// The geometry event describes geometric properties of the output.
// The event is sent when binding to the output object and whenever
// any of the properties change.
//
// The physical size can be set to zero if it doesn't make sense for this
// output (e.g. for projectors or virtual outputs).
//
// Note: wl_output only advertises partial information about the output
// position and identification. Some compositors, for instance those not
// implementing a desktop-style output layout or those exposing virtual
// outputs, might fake this information. Instead of using x and y, clients
// should use xdg_output.logical_position. Instead of using make and model,
// clients should use xdg_output.name and xdg_output.description.
func (i *WlOutput) AddGeometryHandler(h WlOutputGeometryHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.geometryHandlers = append(i.geometryHandlers, h)
	i.mu.Unlock()
}

func (i *WlOutput) RemoveGeometryHandler(h WlOutputGeometryHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.geometryHandlers {
		if e == h {
			i.geometryHandlers = append(i.geometryHandlers[:j], i.geometryHandlers[j+1:]...)
			break
		}
	}
}

// WlOutputModeEvent : advertise available modes for the output
//
// The mode event describes an available mode for the output.
//
// The event is sent when binding to the output object and there
// will always be one mode, the current mode.  The event is sent
// again if an output changes mode, for the mode that is now
// current.  In other words, the current mode is always the last
// mode that was received with the current flag set.
//
// Non-current modes are deprecated. A compositor can decide to only
// advertise the current mode and never send other modes. Clients
// should not rely on non-current modes.
//
// The size of a mode is given in physical hardware units of
// the output device. This is not necessarily the same as
// the output size in the global compositor space. For instance,
// the output may be scaled, as described in wl_output.scale,
// or transformed, as described in wl_output.transform. Clients
// willing to retrieve the output size in the global compositor
// space should use xdg_output.logical_size instead.
//
// The vertical refresh rate can be set to zero if it doesn't make
// sense for this output (e.g. for virtual outputs).
//
// Clients should not use the refresh rate to schedule frames. Instead,
// they should use the wl_surface.frame event or the presentation-time
// protocol.
//
// Note: this information is not always meaningful for all outputs. Some
// compositors, such as those exposing virtual outputs, might fake the
// refresh rate or the size.
type WlOutputModeEvent struct {
	Flags   uint32
	Width   int32
	Height  int32
	Refresh int32
}

type WlOutputModeHandler interface {
	HandleWlOutputMode(WlOutputModeEvent)
}

// AddModeHandler : advertise available modes for the output
//
// The mode event describes an available mode for the output.
//
// The event is sent when binding to the output object and there
// will always be one mode, the current mode.  The event is sent
// again if an output changes mode, for the mode that is now
// current.  In other words, the current mode is always the last
// mode that was received with the current flag set.
//
// Non-current modes are deprecated. A compositor can decide to only
// advertise the current mode and never send other modes. Clients
// should not rely on non-current modes.
//
// The size of a mode is given in physical hardware units of
// the output device. This is not necessarily the same as
// the output size in the global compositor space. For instance,
// the output may be scaled, as described in wl_output.scale,
// or transformed, as described in wl_output.transform. Clients
// willing to retrieve the output size in the global compositor
// space should use xdg_output.logical_size instead.
//
// The vertical refresh rate can be set to zero if it doesn't make
// sense for this output (e.g. for virtual outputs).
//
// Clients should not use the refresh rate to schedule frames. Instead,
// they should use the wl_surface.frame event or the presentation-time
// protocol.
//
// Note: this information is not always meaningful for all outputs. Some
// compositors, such as those exposing virtual outputs, might fake the
// refresh rate or the size.
func (i *WlOutput) AddModeHandler(h WlOutputModeHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.modeHandlers = append(i.modeHandlers, h)
	i.mu.Unlock()
}

func (i *WlOutput) RemoveModeHandler(h WlOutputModeHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.modeHandlers {
		if e == h {
			i.modeHandlers = append(i.modeHandlers[:j], i.modeHandlers[j+1:]...)
			break
		}
	}
}

// WlOutputDoneEvent : sent all information about output
//
// This event is sent after all other properties have been
// sent after binding to the output object and after any
// other property changes done after that. This allows
// changes to the output properties to be seen as
// atomic, even if they happen via multiple events.
type WlOutputDoneEvent struct{}
type WlOutputDoneHandler interface {
	HandleWlOutputDone(WlOutputDoneEvent)
}

// AddDoneHandler : sent all information about output
//
// This event is sent after all other properties have been
// sent after binding to the output object and after any
// other property changes done after that. This allows
// changes to the output properties to be seen as
// atomic, even if they happen via multiple events.
func (i *WlOutput) AddDoneHandler(h WlOutputDoneHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.doneHandlers = append(i.doneHandlers, h)
	i.mu.Unlock()
}

func (i *WlOutput) RemoveDoneHandler(h WlOutputDoneHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.doneHandlers {
		if e == h {
			i.doneHandlers = append(i.doneHandlers[:j], i.doneHandlers[j+1:]...)
			break
		}
	}
}

// WlOutputScaleEvent : output scaling properties
//
// This event contains scaling geometry information
// that is not in the geometry event. It may be sent after
// binding the output object or if the output scale changes
// later. If it is not sent, the client should assume a
// scale of 1.
//
// A scale larger than 1 means that the compositor will
// automatically scale surface buffers by this amount
// when rendering. This is used for very high resolution
// displays where applications rendering at the native
// resolution would be too small to be legible.
//
// It is intended that scaling aware clients track the
// current output of a surface, and if it is on a scaled
// output it should use wl_surface.set_buffer_scale with
// the scale of the output. That way the compositor can
// avoid scaling the surface, and the client can supply
// a higher detail image.
type WlOutputScaleEvent struct {
	Factor int32
}

type WlOutputScaleHandler interface {
	HandleWlOutputScale(WlOutputScaleEvent)
}

// AddScaleHandler : output scaling properties
//
// This event contains scaling geometry information
// that is not in the geometry event. It may be sent after
// binding the output object or if the output scale changes
// later. If it is not sent, the client should assume a
// scale of 1.
//
// A scale larger than 1 means that the compositor will
// automatically scale surface buffers by this amount
// when rendering. This is used for very high resolution
// displays where applications rendering at the native
// resolution would be too small to be legible.
//
// It is intended that scaling aware clients track the
// current output of a surface, and if it is on a scaled
// output it should use wl_surface.set_buffer_scale with
// the scale of the output. That way the compositor can
// avoid scaling the surface, and the client can supply
// a higher detail image.
func (i *WlOutput) AddScaleHandler(h WlOutputScaleHandler) {
	if h == nil {
		return
	}

	i.mu.Lock()
	i.scaleHandlers = append(i.scaleHandlers, h)
	i.mu.Unlock()
}

func (i *WlOutput) RemoveScaleHandler(h WlOutputScaleHandler) {
	i.mu.Lock()
	defer i.mu.Unlock()

	for j, e := range i.scaleHandlers {
		if e == h {
			i.scaleHandlers = append(i.scaleHandlers[:j], i.scaleHandlers[j+1:]...)
			break
		}
	}
}

func (i *WlOutput) Dispatch(event *Event) {
	switch event.Opcode {
	case 0:
		i.mu.RLock()
		if len(i.geometryHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlOutputGeometryEvent{
			X:              event.Int32(),
			Y:              event.Int32(),
			PhysicalWidth:  event.Int32(),
			PhysicalHeight: event.Int32(),
			Subpixel:       event.Int32(),
			Make:           event.String(),
			Model:          event.String(),
			Transform:      event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.geometryHandlers {
			i.mu.RUnlock()

			h.HandleWlOutputGeometry(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 1:
		i.mu.RLock()
		if len(i.modeHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlOutputModeEvent{
			Flags:   event.Uint32(),
			Width:   event.Int32(),
			Height:  event.Int32(),
			Refresh: event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.modeHandlers {
			i.mu.RUnlock()

			h.HandleWlOutputMode(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 2:
		i.mu.RLock()
		if len(i.doneHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlOutputDoneEvent{}

		i.mu.RLock()
		for _, h := range i.doneHandlers {
			i.mu.RUnlock()

			h.HandleWlOutputDone(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	case 3:
		i.mu.RLock()
		if len(i.scaleHandlers) == 0 {
			i.mu.RUnlock()
			break
		}
		i.mu.RUnlock()

		e := WlOutputScaleEvent{
			Factor: event.Int32(),
		}

		i.mu.RLock()
		for _, h := range i.scaleHandlers {
			i.mu.RUnlock()

			h.HandleWlOutputScale(e)

			i.mu.RLock()
		}
		i.mu.RUnlock()
	}
}

// WlRegion : region interface
//
// A region object describes an area.
//
// Region objects are used to describe the opaque and input
// regions of a surface.
type WlRegion struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlRegion : region interface
//
// A region object describes an area.
//
// Region objects are used to describe the opaque and input
// regions of a surface.
func NewWlRegion(ctx *Context) *WlRegion {
	wlRegion := &WlRegion{}
	ctx.Register(wlRegion)
	return wlRegion
}

// Destroy : destroy region
//
// Destroy the region.  This will invalidate the object ID.
//
func (i *WlRegion) Destroy() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// Add : add rectangle to region
//
// Add the specified rectangle to the region.
//
// x: region-local x coordinate
// y: region-local y coordinate
// width: rectangle width
// height: rectangle height
func (i *WlRegion) Add(x, y, width, height int32) error {
	err := i.Context().SendRequest(i, 1, x, y, width, height)
	return err
}

// Subtract : subtract rectangle from region
//
// Subtract the specified rectangle from the region.
//
// x: region-local x coordinate
// y: region-local y coordinate
// width: rectangle width
// height: rectangle height
func (i *WlRegion) Subtract(x, y, width, height int32) error {
	err := i.Context().SendRequest(i, 2, x, y, width, height)
	return err
}

// WlSubcompositor : sub-surface compositing
//
// The global interface exposing sub-surface compositing capabilities.
// A wl_surface, that has sub-surfaces associated, is called the
// parent surface. Sub-surfaces can be arbitrarily nested and create
// a tree of sub-surfaces.
//
// The root surface in a tree of sub-surfaces is the main
// surface. The main surface cannot be a sub-surface, because
// sub-surfaces must always have a parent.
//
// A main surface with its sub-surfaces forms a (compound) window.
// For window management purposes, this set of wl_surface objects is
// to be considered as a single window, and it should also behave as
// such.
//
// The aim of sub-surfaces is to offload some of the compositing work
// within a window from clients to the compositor. A prime example is
// a video player with decorations and video in separate wl_surface
// objects. This should allow the compositor to pass YUV video buffer
// processing to dedicated overlay hardware when possible.
type WlSubcompositor struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlSubcompositor : sub-surface compositing
//
// The global interface exposing sub-surface compositing capabilities.
// A wl_surface, that has sub-surfaces associated, is called the
// parent surface. Sub-surfaces can be arbitrarily nested and create
// a tree of sub-surfaces.
//
// The root surface in a tree of sub-surfaces is the main
// surface. The main surface cannot be a sub-surface, because
// sub-surfaces must always have a parent.
//
// A main surface with its sub-surfaces forms a (compound) window.
// For window management purposes, this set of wl_surface objects is
// to be considered as a single window, and it should also behave as
// such.
//
// The aim of sub-surfaces is to offload some of the compositing work
// within a window from clients to the compositor. A prime example is
// a video player with decorations and video in separate wl_surface
// objects. This should allow the compositor to pass YUV video buffer
// processing to dedicated overlay hardware when possible.
func NewWlSubcompositor(ctx *Context) *WlSubcompositor {
	wlSubcompositor := &WlSubcompositor{}
	ctx.Register(wlSubcompositor)
	return wlSubcompositor
}

// Destroy : unbind from the subcompositor interface
//
// Informs the server that the client will not be using this
// protocol object anymore. This does not affect any other
// objects, wl_subsurface objects included.
//
func (i *WlSubcompositor) Destroy() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// GetSubsurface : give a surface the role sub-surface
//
// Create a sub-surface interface for the given surface, and
// associate it with the given parent surface. This turns a
// plain wl_surface into a sub-surface.
//
// The to-be sub-surface must not already have another role, and it
// must not have an existing wl_subsurface object. Otherwise a protocol
// error is raised.
//
// Adding sub-surfaces to a parent is a double-buffered operation on the
// parent (see wl_surface.commit). The effect of adding a sub-surface
// becomes visible on the next time the state of the parent surface is
// applied.
//
// This request modifies the behaviour of wl_surface.commit request on
// the sub-surface, see the documentation on wl_subsurface interface.
//
// id: the new sub-surface object ID
// surface: the surface to be turned into a sub-surface
// parent: the parent surface
func (i *WlSubcompositor) GetSubsurface(surface, parent *WlSurface) (*WlSubsurface, error) {
	wlSubsurface := NewWlSubsurface(i.Context())
	err := i.Context().SendRequest(i, 1, wlSubsurface, surface, parent)
	return wlSubsurface, err
}

// WlSubcompositorError :
const (
	// WlSubcompositorErrorBadSurface : the to-be sub-surface is invalid
	WlSubcompositorErrorBadSurface = 0
)

// WlSubsurface : sub-surface interface to a wl_surface
//
// An additional interface to a wl_surface object, which has been
// made a sub-surface. A sub-surface has one parent surface. A
// sub-surface's size and position are not limited to that of the parent.
// Particularly, a sub-surface is not automatically clipped to its
// parent's area.
//
// A sub-surface becomes mapped, when a non-NULL wl_buffer is applied
// and the parent surface is mapped. The order of which one happens
// first is irrelevant. A sub-surface is hidden if the parent becomes
// hidden, or if a NULL wl_buffer is applied. These rules apply
// recursively through the tree of surfaces.
//
// The behaviour of a wl_surface.commit request on a sub-surface
// depends on the sub-surface's mode. The possible modes are
// synchronized and desynchronized, see methods
// wl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized
// mode caches the wl_surface state to be applied when the parent's
// state gets applied, and desynchronized mode applies the pending
// wl_surface state directly. A sub-surface is initially in the
// synchronized mode.
//
// Sub-surfaces also have another kind of state, which is managed by
// wl_subsurface requests, as opposed to wl_surface requests. This
// state includes the sub-surface position relative to the parent
// surface (wl_subsurface.set_position), and the stacking order of
// the parent and its sub-surfaces (wl_subsurface.place_above and
// .place_below). This state is applied when the parent surface's
// wl_surface state is applied, regardless of the sub-surface's mode.
// As the exception, set_sync and set_desync are effective immediately.
//
// The main surface can be thought to be always in desynchronized mode,
// since it does not have a parent in the sub-surfaces sense.
//
// Even if a sub-surface is in desynchronized mode, it will behave as
// in synchronized mode, if its parent surface behaves as in
// synchronized mode. This rule is applied recursively throughout the
// tree of surfaces. This means, that one can set a sub-surface into
// synchronized mode, and then assume that all its child and grand-child
// sub-surfaces are synchronized, too, without explicitly setting them.
//
// If the wl_surface associated with the wl_subsurface is destroyed, the
// wl_subsurface object becomes inert. Note, that destroying either object
// takes effect immediately. If you need to synchronize the removal
// of a sub-surface to the parent surface update, unmap the sub-surface
// first by attaching a NULL wl_buffer, update parent, and then destroy
// the sub-surface.
//
// If the parent wl_surface object is destroyed, the sub-surface is
// unmapped.
type WlSubsurface struct {
	BaseProxy
	mu sync.RWMutex
}

// NewWlSubsurface : sub-surface interface to a wl_surface
//
// An additional interface to a wl_surface object, which has been
// made a sub-surface. A sub-surface has one parent surface. A
// sub-surface's size and position are not limited to that of the parent.
// Particularly, a sub-surface is not automatically clipped to its
// parent's area.
//
// A sub-surface becomes mapped, when a non-NULL wl_buffer is applied
// and the parent surface is mapped. The order of which one happens
// first is irrelevant. A sub-surface is hidden if the parent becomes
// hidden, or if a NULL wl_buffer is applied. These rules apply
// recursively through the tree of surfaces.
//
// The behaviour of a wl_surface.commit request on a sub-surface
// depends on the sub-surface's mode. The possible modes are
// synchronized and desynchronized, see methods
// wl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized
// mode caches the wl_surface state to be applied when the parent's
// state gets applied, and desynchronized mode applies the pending
// wl_surface state directly. A sub-surface is initially in the
// synchronized mode.
//
// Sub-surfaces also have another kind of state, which is managed by
// wl_subsurface requests, as opposed to wl_surface requests. This
// state includes the sub-surface position relative to the parent
// surface (wl_subsurface.set_position), and the stacking order of
// the parent and its sub-surfaces (wl_subsurface.place_above and
// .place_below). This state is applied when the parent surface's
// wl_surface state is applied, regardless of the sub-surface's mode.
// As the exception, set_sync and set_desync are effective immediately.
//
// The main surface can be thought to be always in desynchronized mode,
// since it does not have a parent in the sub-surfaces sense.
//
// Even if a sub-surface is in desynchronized mode, it will behave as
// in synchronized mode, if its parent surface behaves as in
// synchronized mode. This rule is applied recursively throughout the
// tree of surfaces. This means, that one can set a sub-surface into
// synchronized mode, and then assume that all its child and grand-child
// sub-surfaces are synchronized, too, without explicitly setting them.
//
// If the wl_surface associated with the wl_subsurface is destroyed, the
// wl_subsurface object becomes inert. Note, that destroying either object
// takes effect immediately. If you need to synchronize the removal
// of a sub-surface to the parent surface update, unmap the sub-surface
// first by attaching a NULL wl_buffer, update parent, and then destroy
// the sub-surface.
//
// If the parent wl_surface object is destroyed, the sub-surface is
// unmapped.
func NewWlSubsurface(ctx *Context) *WlSubsurface {
	wlSubsurface := &WlSubsurface{}
	ctx.Register(wlSubsurface)
	return wlSubsurface
}

// Destroy : remove sub-surface interface
//
// The sub-surface interface is removed from the wl_surface object
// that was turned into a sub-surface with a
// wl_subcompositor.get_subsurface request. The wl_surface's association
// to the parent is deleted, and the wl_surface loses its role as
// a sub-surface. The wl_surface is unmapped immediately.
//
func (i *WlSubsurface) Destroy() error {
	err := i.Context().SendRequest(i, 0)
	return err
}

// SetPosition : reposition the sub-surface
//
// This schedules a sub-surface position change.
// The sub-surface will be moved so that its origin (top left
// corner pixel) will be at the location x, y of the parent surface
// coordinate system. The coordinates are not restricted to the parent
// surface area. Negative values are allowed.
//
// The scheduled coordinates will take effect whenever the state of the
// parent surface is applied. When this happens depends on whether the
// parent surface is in synchronized mode or not. See
// wl_subsurface.set_sync and wl_subsurface.set_desync for details.
//
// If more than one set_position request is invoked by the client before
// the commit of the parent surface, the position of a new request always
// replaces the scheduled position from any previous request.
//
// The initial position is 0, 0.
//
// x: x coordinate in the parent surface
// y: y coordinate in the parent surface
func (i *WlSubsurface) SetPosition(x, y int32) error {
	err := i.Context().SendRequest(i, 1, x, y)
	return err
}

// PlaceAbove : restack the sub-surface
//
// This sub-surface is taken from the stack, and put back just
// above the reference surface, changing the z-order of the sub-surfaces.
// The reference surface must be one of the sibling surfaces, or the
// parent surface. Using any other surface, including this sub-surface,
// will cause a protocol error.
//
// The z-order is double-buffered. Requests are handled in order and
// applied immediately to a pending state. The final pending state is
// copied to the active state the next time the state of the parent
// surface is applied. When this happens depends on whether the parent
// surface is in synchronized mode or not. See wl_subsurface.set_sync and
// wl_subsurface.set_desync for details.
//
// A new sub-surface is initially added as the top-most in the stack
// of its siblings and parent.
//
// sibling: the reference surface
func (i *WlSubsurface) PlaceAbove(sibling *WlSurface) error {
	err := i.Context().SendRequest(i, 2, sibling)
	return err
}

// PlaceBelow : restack the sub-surface
//
// The sub-surface is placed just below the reference surface.
// See wl_subsurface.place_above.
//
// sibling: the reference surface
func (i *WlSubsurface) PlaceBelow(sibling *WlSurface) error {
	err := i.Context().SendRequest(i, 3, sibling)
	return err
}

// SetSync : set sub-surface to synchronized mode
//
// Change the commit behaviour of the sub-surface to synchronized
// mode, also described as the parent dependent mode.
//
// In synchronized mode, wl_surface.commit on a sub-surface will
// accumulate the committed state in a cache, but the state will
// not be applied and hence will not change the compositor output.
// The cached state is applied to the sub-surface immediately after
// the parent surface's state is applied. This ensures atomic
// updates of the parent and all its synchronized sub-surfaces.
// Applying the cached state will invalidate the cache, so further
// parent surface commits do not (re-)apply old state.
//
// See wl_subsurface for the recursive effect of this mode.
//
func (i *WlSubsurface) SetSync() error {
	err := i.Context().SendRequest(i, 4)
	return err
}

// SetDesync : set sub-surface to desynchronized mode
//
// Change the commit behaviour of the sub-surface to desynchronized
// mode, also described as independent or freely running mode.
//
// In desynchronized mode, wl_surface.commit on a sub-surface will
// apply the pending state directly, without caching, as happens
// normally with a wl_surface. Calling wl_surface.commit on the
// parent surface has no effect on the sub-surface's wl_surface
// state. This mode allows a sub-surface to be updated on its own.
//
// If cached state exists when wl_surface.commit is called in
// desynchronized mode, the pending state is added to the cached
// state, and applied as a whole. This invalidates the cache.
//
// Note: even if a sub-surface is set to desynchronized, a parent
// sub-surface may override it to behave as synchronized. For details,
// see wl_subsurface.
//
// If a surface's parent surface behaves as desynchronized, then
// the cached state is applied on set_desync.
//
func (i *WlSubsurface) SetDesync() error {
	err := i.Context().SendRequest(i, 5)
	return err
}

// WlSubsurfaceError :
const (
	// WlSubsurfaceErrorBadSurface : wl_surface is not a sibling or the parent
	WlSubsurfaceErrorBadSurface = 0
)
